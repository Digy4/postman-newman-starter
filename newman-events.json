{
  "start": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "5931b7f7-0ded-42d9-a38c-1877ee159f30"
      },
      "run": {
        "state": {
          "items": [
            {
              "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "name": "users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ]
            },
            {
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "name": "failing-users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Failing - Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ]
                  }
                }
              ]
            }
          ],
          "data": [
            {}
          ],
          "environment": {
            "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
            "values": []
          },
          "globals": {
            "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
            "values": []
          },
          "vaultSecrets": {
            "id": "79ca7b8d-6b25-48d2-925f-d1a61debce5a",
            "__getMatchingVariables": {},
            "__vaultVariableScope": true,
            "values": []
          },
          "collectionVariables": {
            "id": "241a8bdb-3084-4abb-8e84-2d6acfe308a3",
            "values": []
          },
          "certificates": 0,
          "_variables": {
            "id": "69a2721c-935b-4710-a8f8-d7af16cd89e4",
            "values": []
          },
          "cursor": {
            "length": 2,
            "position": 0,
            "cycles": 1,
            "iteration": 0,
            "ref": "5931b7f7-0ded-42d9-a38c-1877ee159f30"
          }
        },
        "stack": {},
        "options": {
          "stopOnFailure": false,
          "iterationCount": 1,
          "delay": {},
          "timeout": {
            "global": null,
            "request": null,
            "script": null
          },
          "fileResolver": {
            "_fs": {
              "F_OK": 0,
              "R_OK": 4,
              "W_OK": 2,
              "X_OK": 1,
              "constants": {
                "UV_FS_SYMLINK_DIR": 1,
                "UV_FS_SYMLINK_JUNCTION": 2,
                "O_RDONLY": 0,
                "O_WRONLY": 1,
                "O_RDWR": 2,
                "UV_DIRENT_UNKNOWN": 0,
                "UV_DIRENT_FILE": 1,
                "UV_DIRENT_DIR": 2,
                "UV_DIRENT_LINK": 3,
                "UV_DIRENT_FIFO": 4,
                "UV_DIRENT_SOCKET": 5,
                "UV_DIRENT_CHAR": 6,
                "UV_DIRENT_BLOCK": 7,
                "EXTENSIONLESS_FORMAT_JAVASCRIPT": 0,
                "EXTENSIONLESS_FORMAT_WASM": 1,
                "S_IFMT": 61440,
                "S_IFREG": 32768,
                "S_IFDIR": 16384,
                "S_IFCHR": 8192,
                "S_IFIFO": 4096,
                "S_IFLNK": 40960,
                "O_CREAT": 256,
                "O_EXCL": 1024,
                "UV_FS_O_FILEMAP": 536870912,
                "O_TRUNC": 512,
                "O_APPEND": 8,
                "S_IRUSR": 256,
                "S_IWUSR": 128,
                "F_OK": 0,
                "R_OK": 4,
                "W_OK": 2,
                "X_OK": 1,
                "UV_FS_COPYFILE_EXCL": 1,
                "COPYFILE_EXCL": 1,
                "UV_FS_COPYFILE_FICLONE": 2,
                "COPYFILE_FICLONE": 2,
                "UV_FS_COPYFILE_FICLONE_FORCE": 4,
                "COPYFILE_FICLONE_FORCE": 4
              },
              "promises": {
                "constants": "[Circular Reference]"
              }
            },
            "_path": {
              "sep": "\\",
              "delimiter": ";",
              "win32": "[Circular Reference]",
              "posix": {
                "sep": "/",
                "delimiter": ":",
                "win32": "[Circular Reference]",
                "posix": "[Circular Reference]"
              }
            },
            "constants": "[Circular Reference]",
            "workingDir": "C:\\Users\\saiko\\OneDrive\\Coding\\digy4\\postman-newman-starter",
            "insecureFileRead": true,
            "fileWhitelist": [],
            "isWindows": true
          },
          "requester": {
            "useWhatWGUrlParser": true,
            "cookieJar": {
              "version": "tough-cookie@4.1.3-postman.1",
              "storeType": "MemoryCookieStore",
              "rejectPublicSuffixes": false,
              "enableLooseMode": true,
              "allowSpecialUseDomain": true,
              "prefixSecurity": "silent",
              "cookies": []
            },
            "timings": false
          },
          "certificates": 0
        },
        "host": {
          "_events": {},
          "_eventsCount": 5,
          "_bridgeConnected": true,
          "_dispatchQueue": [],
          "_executing": {},
          "_initialized": true,
          "debug": false
        },
        "requester": {
          "options": {
            "timeout": null,
            "timings": false,
            "verbose": false,
            "keepAlive": true,
            "cookieJar": {
              "version": "tough-cookie@4.1.3-postman.1",
              "storeType": "MemoryCookieStore",
              "rejectPublicSuffixes": false,
              "enableLooseMode": true,
              "allowSpecialUseDomain": true,
              "prefixSecurity": "silent",
              "cookies": []
            },
            "useWhatWGUrlParser": true,
            "followRedirects": true,
            "implicitCacheControl": true,
            "implicitTraceHeader": true,
            "systemHeaders": {},
            "network": {}
          }
        },
        "waterfall": "[Circular Reference]",
        "snrHash": null
      }
    }
  ],
  "beforeIteration": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "5931b7f7-0ded-42d9-a38c-1877ee159f30"
      }
    }
  ],
  "beforeItem": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121"
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    }
  ],
  "beforePrerequest": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121"
      },
      "events": [],
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0
      },
      "events": [],
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    }
  ],
  "prerequest": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121"
      },
      "executions": [],
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0
      },
      "executions": [],
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    }
  ],
  "beforeRequest": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
      },
      "request": {
        "url": {
          "protocol": "https",
          "path": [
            "api",
            "users"
          ],
          "host": [
            "reqres",
            "in"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "x-api-key",
            "value": "reqres-free-v1"
          }
        ],
        "method": "GET"
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
      },
      "request": {
        "url": {
          "protocol": "https",
          "path": [
            "api",
            "users-failing"
          ],
          "host": [
            "reqres",
            "in"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "x-api-key",
            "value": "reqres-free-v1"
          }
        ],
        "method": "GET"
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    }
  ],
  "request": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
      },
      "response": {
        "id": "9262640e-f74e-419a-b0cf-d5858b50d83c",
        "status": "OK",
        "code": 200,
        "header": [
          {
            "key": "Date",
            "value": "Thu, 04 Sep 2025 20:48:39 GMT"
          },
          {
            "key": "Content-Type",
            "value": "application/json; charset=utf-8"
          },
          {
            "key": "Transfer-Encoding",
            "value": "chunked"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          },
          {
            "key": "Content-Encoding",
            "value": "br"
          },
          {
            "key": "Access-Control-Allow-Credentials",
            "value": "true"
          },
          {
            "key": "Access-Control-Allow-Headers",
            "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
          },
          {
            "key": "Access-Control-Allow-Methods",
            "value": "GET, POST, PUT, DELETE, OPTIONS"
          },
          {
            "key": "Access-Control-Allow-Origin",
            "value": "http://localhost:5173"
          },
          {
            "key": "etag",
            "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
          },
          {
            "key": "Nel",
            "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
          },
          {
            "key": "Ratelimit-Limit",
            "value": "100"
          },
          {
            "key": "Ratelimit-Policy",
            "value": "100;w=60"
          },
          {
            "key": "Ratelimit-Remaining",
            "value": "98"
          },
          {
            "key": "Ratelimit-Reset",
            "value": "60"
          },
          {
            "key": "Referrer-Policy",
            "value": "strict-origin-when-cross-origin"
          },
          {
            "key": "Report-To",
            "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
          },
          {
            "key": "Reporting-Endpoints",
            "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
          },
          {
            "key": "Vary",
            "value": "Origin, Accept-Encoding"
          },
          {
            "key": "Via",
            "value": "1.1 heroku-router"
          },
          {
            "key": "X-Content-Type-Options",
            "value": "nosniff"
          },
          {
            "key": "X-Frame-Options",
            "value": "DENY"
          },
          {
            "key": "X-Request-Id",
            "value": "e1941749-7b60-e36e-8d77-156b64e83683"
          },
          {
            "key": "X-Xss-Protection",
            "value": "1; mode=block"
          },
          {
            "key": "Age",
            "value": "2007"
          },
          {
            "key": "Cache-Control",
            "value": "max-age=14400"
          },
          {
            "key": "cf-cache-status",
            "value": "HIT"
          },
          {
            "key": "Server",
            "value": "cloudflare"
          },
          {
            "key": "CF-RAY",
            "value": "97a0595448929584-LHR"
          },
          {
            "key": "server-timing",
            "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
          }
        ],
        "stream": {
          "type": "Buffer",
          "data": [
            123,
            34,
            112,
            97,
            103,
            101,
            34,
            58,
            49,
            44,
            34,
            112,
            101,
            114,
            95,
            112,
            97,
            103,
            101,
            34,
            58,
            54,
            44,
            34,
            116,
            111,
            116,
            97,
            108,
            34,
            58,
            49,
            50,
            44,
            34,
            116,
            111,
            116,
            97,
            108,
            95,
            112,
            97,
            103,
            101,
            115,
            34,
            58,
            50,
            44,
            34,
            100,
            97,
            116,
            97,
            34,
            58,
            91,
            123,
            34,
            105,
            100,
            34,
            58,
            49,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            103,
            101,
            111,
            114,
            103,
            101,
            46,
            98,
            108,
            117,
            116,
            104,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            71,
            101,
            111,
            114,
            103,
            101,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            66,
            108,
            117,
            116,
            104,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            49,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            50,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            106,
            97,
            110,
            101,
            116,
            46,
            119,
            101,
            97,
            118,
            101,
            114,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            74,
            97,
            110,
            101,
            116,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            87,
            101,
            97,
            118,
            101,
            114,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            50,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            51,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            101,
            109,
            109,
            97,
            46,
            119,
            111,
            110,
            103,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            69,
            109,
            109,
            97,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            87,
            111,
            110,
            103,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            51,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            52,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            101,
            118,
            101,
            46,
            104,
            111,
            108,
            116,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            69,
            118,
            101,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            72,
            111,
            108,
            116,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            52,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            53,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            99,
            104,
            97,
            114,
            108,
            101,
            115,
            46,
            109,
            111,
            114,
            114,
            105,
            115,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            67,
            104,
            97,
            114,
            108,
            101,
            115,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            77,
            111,
            114,
            114,
            105,
            115,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            53,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            54,
            44,
            34,
            101,
            109,
            97,
            105,
            108,
            34,
            58,
            34,
            116,
            114,
            97,
            99,
            101,
            121,
            46,
            114,
            97,
            109,
            111,
            115,
            64,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            34,
            44,
            34,
            102,
            105,
            114,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            84,
            114,
            97,
            99,
            101,
            121,
            34,
            44,
            34,
            108,
            97,
            115,
            116,
            95,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            82,
            97,
            109,
            111,
            115,
            34,
            44,
            34,
            97,
            118,
            97,
            116,
            97,
            114,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            114,
            101,
            113,
            114,
            101,
            115,
            46,
            105,
            110,
            47,
            105,
            109,
            103,
            47,
            102,
            97,
            99,
            101,
            115,
            47,
            54,
            45,
            105,
            109,
            97,
            103,
            101,
            46,
            106,
            112,
            103,
            34,
            125,
            93,
            44,
            34,
            115,
            117,
            112,
            112,
            111,
            114,
            116,
            34,
            58,
            123,
            34,
            117,
            114,
            108,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            99,
            111,
            110,
            116,
            101,
            110,
            116,
            99,
            97,
            100,
            100,
            121,
            46,
            105,
            111,
            63,
            117,
            116,
            109,
            95,
            115,
            111,
            117,
            114,
            99,
            101,
            61,
            114,
            101,
            113,
            114,
            101,
            115,
            38,
            117,
            116,
            109,
            95,
            109,
            101,
            100,
            105,
            117,
            109,
            61,
            106,
            115,
            111,
            110,
            38,
            117,
            116,
            109,
            95,
            99,
            97,
            109,
            112,
            97,
            105,
            103,
            110,
            61,
            114,
            101,
            102,
            101,
            114,
            114,
            97,
            108,
            34,
            44,
            34,
            116,
            101,
            120,
            116,
            34,
            58,
            34,
            84,
            105,
            114,
            101,
            100,
            32,
            111,
            102,
            32,
            119,
            114,
            105,
            116,
            105,
            110,
            103,
            32,
            101,
            110,
            100,
            108,
            101,
            115,
            115,
            32,
            115,
            111,
            99,
            105,
            97,
            108,
            32,
            109,
            101,
            100,
            105,
            97,
            32,
            99,
            111,
            110,
            116,
            101,
            110,
            116,
            63,
            32,
            76,
            101,
            116,
            32,
            67,
            111,
            110,
            116,
            101,
            110,
            116,
            32,
            67,
            97,
            100,
            100,
            121,
            32,
            103,
            101,
            110,
            101,
            114,
            97,
            116,
            101,
            32,
            105,
            116,
            32,
            102,
            111,
            114,
            32,
            121,
            111,
            117,
            46,
            34,
            125,
            125
          ]
        },
        "cookie": [],
        "responseTime": 580,
        "responseSize": 1054
      },
      "request": {
        "url": {
          "protocol": "https",
          "path": [
            "api",
            "users"
          ],
          "host": [
            "reqres",
            "in"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "x-api-key",
            "value": "reqres-free-v1"
          },
          {
            "key": "User-Agent",
            "value": "PostmanRuntime/7.39.1",
            "system": true
          },
          {
            "key": "Accept",
            "value": "*/*",
            "system": true
          },
          {
            "key": "Cache-Control",
            "value": "no-cache",
            "system": true
          },
          {
            "key": "Postman-Token",
            "value": "dcfc39c2-5538-4593-8381-926f982713d3",
            "system": true
          },
          {
            "key": "Host",
            "value": "reqres.in",
            "system": true
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br",
            "system": true
          },
          {
            "key": "Connection",
            "value": "keep-alive",
            "system": true
          }
        ],
        "method": "GET"
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dcfc39c2-5538-4593-8381-926f982713d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      },
      "cookies": [],
      "history": {
        "execution": {
          "verbose": false,
          "sessions": {},
          "data": [
            {
              "request": {
                "method": "GET",
                "href": "https://reqres.in/api/users",
                "headers": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache"
                  },
                  {
                    "key": "Postman-Token",
                    "value": "dcfc39c2-5538-4593-8381-926f982713d3"
                  },
                  {
                    "key": "Host",
                    "value": "reqres.in"
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  }
                ],
                "httpVersion": "1.1"
              },
              "response": {
                "statusCode": 200,
                "headers": [
                  {
                    "key": "Date",
                    "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Transfer-Encoding",
                    "value": "chunked"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Content-Encoding",
                    "value": "br"
                  },
                  {
                    "key": "Access-Control-Allow-Credentials",
                    "value": "true"
                  },
                  {
                    "key": "Access-Control-Allow-Headers",
                    "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                  },
                  {
                    "key": "Access-Control-Allow-Methods",
                    "value": "GET, POST, PUT, DELETE, OPTIONS"
                  },
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "http://localhost:5173"
                  },
                  {
                    "key": "etag",
                    "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
                  },
                  {
                    "key": "Nel",
                    "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                  },
                  {
                    "key": "Ratelimit-Limit",
                    "value": "100"
                  },
                  {
                    "key": "Ratelimit-Policy",
                    "value": "100;w=60"
                  },
                  {
                    "key": "Ratelimit-Remaining",
                    "value": "98"
                  },
                  {
                    "key": "Ratelimit-Reset",
                    "value": "60"
                  },
                  {
                    "key": "Referrer-Policy",
                    "value": "strict-origin-when-cross-origin"
                  },
                  {
                    "key": "Report-To",
                    "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
                  },
                  {
                    "key": "Reporting-Endpoints",
                    "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
                  },
                  {
                    "key": "Vary",
                    "value": "Origin, Accept-Encoding"
                  },
                  {
                    "key": "Via",
                    "value": "1.1 heroku-router"
                  },
                  {
                    "key": "X-Content-Type-Options",
                    "value": "nosniff"
                  },
                  {
                    "key": "X-Frame-Options",
                    "value": "DENY"
                  },
                  {
                    "key": "X-Request-Id",
                    "value": "e1941749-7b60-e36e-8d77-156b64e83683"
                  },
                  {
                    "key": "X-Xss-Protection",
                    "value": "1; mode=block"
                  },
                  {
                    "key": "Age",
                    "value": "2007"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "max-age=14400"
                  },
                  {
                    "key": "cf-cache-status",
                    "value": "HIT"
                  },
                  {
                    "key": "Server",
                    "value": "cloudflare"
                  },
                  {
                    "key": "CF-RAY",
                    "value": "97a0595448929584-LHR"
                  },
                  {
                    "key": "server-timing",
                    "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
                  }
                ],
                "httpVersion": "1.1"
              }
            }
          ]
        }
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
      },
      "response": {
        "id": "d006f2d6-4258-442f-9a59-9b1e8e2fec35",
        "status": "OK",
        "code": 200,
        "header": [
          {
            "key": "Date",
            "value": "Thu, 04 Sep 2025 20:48:39 GMT"
          },
          {
            "key": "Content-Type",
            "value": "application/json; charset=utf-8"
          },
          {
            "key": "Transfer-Encoding",
            "value": "chunked"
          },
          {
            "key": "Connection",
            "value": "keep-alive"
          },
          {
            "key": "Content-Encoding",
            "value": "br"
          },
          {
            "key": "Access-Control-Allow-Credentials",
            "value": "true"
          },
          {
            "key": "Access-Control-Allow-Headers",
            "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
          },
          {
            "key": "Access-Control-Allow-Methods",
            "value": "GET, POST, PUT, DELETE, OPTIONS"
          },
          {
            "key": "Access-Control-Allow-Origin",
            "value": "http://localhost:5173"
          },
          {
            "key": "Etag",
            "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
          },
          {
            "key": "Nel",
            "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
          },
          {
            "key": "Ratelimit-Limit",
            "value": "100"
          },
          {
            "key": "Ratelimit-Policy",
            "value": "100;w=60"
          },
          {
            "key": "Ratelimit-Remaining",
            "value": "98"
          },
          {
            "key": "Ratelimit-Reset",
            "value": "60"
          },
          {
            "key": "Referrer-Policy",
            "value": "strict-origin-when-cross-origin"
          },
          {
            "key": "Report-To",
            "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
          },
          {
            "key": "Reporting-Endpoints",
            "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
          },
          {
            "key": "Vary",
            "value": "Origin, Accept-Encoding"
          },
          {
            "key": "Via",
            "value": "1.1 heroku-router"
          },
          {
            "key": "X-Content-Type-Options",
            "value": "nosniff"
          },
          {
            "key": "X-Frame-Options",
            "value": "DENY"
          },
          {
            "key": "X-Request-Id",
            "value": "b7198cca-6794-1546-2d93-dd031356217b"
          },
          {
            "key": "X-Xss-Protection",
            "value": "1; mode=block"
          },
          {
            "key": "Cache-Control",
            "value": "max-age=14400"
          },
          {
            "key": "cf-cache-status",
            "value": "EXPIRED"
          },
          {
            "key": "Server",
            "value": "cloudflare"
          },
          {
            "key": "CF-RAY",
            "value": "97a059564ae29584-LHR"
          },
          {
            "key": "server-timing",
            "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
          }
        ],
        "stream": {
          "type": "Buffer",
          "data": [
            123,
            34,
            112,
            97,
            103,
            101,
            34,
            58,
            49,
            44,
            34,
            112,
            101,
            114,
            95,
            112,
            97,
            103,
            101,
            34,
            58,
            54,
            44,
            34,
            116,
            111,
            116,
            97,
            108,
            34,
            58,
            49,
            50,
            44,
            34,
            116,
            111,
            116,
            97,
            108,
            95,
            112,
            97,
            103,
            101,
            115,
            34,
            58,
            50,
            44,
            34,
            100,
            97,
            116,
            97,
            34,
            58,
            91,
            123,
            34,
            105,
            100,
            34,
            58,
            49,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            99,
            101,
            114,
            117,
            108,
            101,
            97,
            110,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            48,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            57,
            56,
            66,
            50,
            68,
            49,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            53,
            45,
            52,
            48,
            50,
            48,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            50,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            102,
            117,
            99,
            104,
            115,
            105,
            97,
            32,
            114,
            111,
            115,
            101,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            49,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            67,
            55,
            52,
            51,
            55,
            53,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            55,
            45,
            50,
            48,
            51,
            49,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            51,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            116,
            114,
            117,
            101,
            32,
            114,
            101,
            100,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            50,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            66,
            70,
            49,
            57,
            51,
            50,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            57,
            45,
            49,
            54,
            54,
            52,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            52,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            97,
            113,
            117,
            97,
            32,
            115,
            107,
            121,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            51,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            55,
            66,
            67,
            52,
            67,
            52,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            52,
            45,
            52,
            56,
            49,
            49,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            53,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            116,
            105,
            103,
            101,
            114,
            108,
            105,
            108,
            121,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            52,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            69,
            50,
            53,
            56,
            51,
            69,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            55,
            45,
            49,
            52,
            53,
            54,
            34,
            125,
            44,
            123,
            34,
            105,
            100,
            34,
            58,
            54,
            44,
            34,
            110,
            97,
            109,
            101,
            34,
            58,
            34,
            98,
            108,
            117,
            101,
            32,
            116,
            117,
            114,
            113,
            117,
            111,
            105,
            115,
            101,
            34,
            44,
            34,
            121,
            101,
            97,
            114,
            34,
            58,
            50,
            48,
            48,
            53,
            44,
            34,
            99,
            111,
            108,
            111,
            114,
            34,
            58,
            34,
            35,
            53,
            51,
            66,
            48,
            65,
            69,
            34,
            44,
            34,
            112,
            97,
            110,
            116,
            111,
            110,
            101,
            95,
            118,
            97,
            108,
            117,
            101,
            34,
            58,
            34,
            49,
            53,
            45,
            53,
            50,
            49,
            55,
            34,
            125,
            93,
            44,
            34,
            115,
            117,
            112,
            112,
            111,
            114,
            116,
            34,
            58,
            123,
            34,
            117,
            114,
            108,
            34,
            58,
            34,
            104,
            116,
            116,
            112,
            115,
            58,
            47,
            47,
            99,
            111,
            110,
            116,
            101,
            110,
            116,
            99,
            97,
            100,
            100,
            121,
            46,
            105,
            111,
            63,
            117,
            116,
            109,
            95,
            115,
            111,
            117,
            114,
            99,
            101,
            61,
            114,
            101,
            113,
            114,
            101,
            115,
            38,
            117,
            116,
            109,
            95,
            109,
            101,
            100,
            105,
            117,
            109,
            61,
            106,
            115,
            111,
            110,
            38,
            117,
            116,
            109,
            95,
            99,
            97,
            109,
            112,
            97,
            105,
            103,
            110,
            61,
            114,
            101,
            102,
            101,
            114,
            114,
            97,
            108,
            34,
            44,
            34,
            116,
            101,
            120,
            116,
            34,
            58,
            34,
            84,
            105,
            114,
            101,
            100,
            32,
            111,
            102,
            32,
            119,
            114,
            105,
            116,
            105,
            110,
            103,
            32,
            101,
            110,
            100,
            108,
            101,
            115,
            115,
            32,
            115,
            111,
            99,
            105,
            97,
            108,
            32,
            109,
            101,
            100,
            105,
            97,
            32,
            99,
            111,
            110,
            116,
            101,
            110,
            116,
            63,
            32,
            76,
            101,
            116,
            32,
            67,
            111,
            110,
            116,
            101,
            110,
            116,
            32,
            67,
            97,
            100,
            100,
            121,
            32,
            103,
            101,
            110,
            101,
            114,
            97,
            116,
            101,
            32,
            105,
            116,
            32,
            102,
            111,
            114,
            32,
            121,
            111,
            117,
            46,
            34,
            125,
            125
          ]
        },
        "cookie": [],
        "responseTime": 168,
        "responseSize": 763
      },
      "request": {
        "url": {
          "protocol": "https",
          "path": [
            "api",
            "users-failing"
          ],
          "host": [
            "reqres",
            "in"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "x-api-key",
            "value": "reqres-free-v1"
          },
          {
            "key": "User-Agent",
            "value": "PostmanRuntime/7.39.1",
            "system": true
          },
          {
            "key": "Accept",
            "value": "*/*",
            "system": true
          },
          {
            "key": "Cache-Control",
            "value": "no-cache",
            "system": true
          },
          {
            "key": "Postman-Token",
            "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
            "system": true
          },
          {
            "key": "Host",
            "value": "reqres.in",
            "system": true
          },
          {
            "key": "Accept-Encoding",
            "value": "gzip, deflate, br",
            "system": true
          },
          {
            "key": "Connection",
            "value": "keep-alive",
            "system": true
          }
        ],
        "method": "GET"
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      },
      "cookies": [],
      "history": {
        "execution": {
          "verbose": false,
          "sessions": {},
          "data": [
            {
              "request": {
                "method": "GET",
                "href": "https://reqres.in/api/users-failing",
                "headers": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1"
                  },
                  {
                    "key": "Accept",
                    "value": "*/*"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache"
                  },
                  {
                    "key": "Postman-Token",
                    "value": "c15fa6c5-154c-4670-b109-ed47a1347727"
                  },
                  {
                    "key": "Host",
                    "value": "reqres.in"
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  }
                ],
                "httpVersion": "1.1"
              },
              "response": {
                "statusCode": 200,
                "headers": [
                  {
                    "key": "Date",
                    "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Transfer-Encoding",
                    "value": "chunked"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Content-Encoding",
                    "value": "br"
                  },
                  {
                    "key": "Access-Control-Allow-Credentials",
                    "value": "true"
                  },
                  {
                    "key": "Access-Control-Allow-Headers",
                    "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                  },
                  {
                    "key": "Access-Control-Allow-Methods",
                    "value": "GET, POST, PUT, DELETE, OPTIONS"
                  },
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "http://localhost:5173"
                  },
                  {
                    "key": "Etag",
                    "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
                  },
                  {
                    "key": "Nel",
                    "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                  },
                  {
                    "key": "Ratelimit-Limit",
                    "value": "100"
                  },
                  {
                    "key": "Ratelimit-Policy",
                    "value": "100;w=60"
                  },
                  {
                    "key": "Ratelimit-Remaining",
                    "value": "98"
                  },
                  {
                    "key": "Ratelimit-Reset",
                    "value": "60"
                  },
                  {
                    "key": "Referrer-Policy",
                    "value": "strict-origin-when-cross-origin"
                  },
                  {
                    "key": "Report-To",
                    "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
                  },
                  {
                    "key": "Reporting-Endpoints",
                    "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
                  },
                  {
                    "key": "Vary",
                    "value": "Origin, Accept-Encoding"
                  },
                  {
                    "key": "Via",
                    "value": "1.1 heroku-router"
                  },
                  {
                    "key": "X-Content-Type-Options",
                    "value": "nosniff"
                  },
                  {
                    "key": "X-Frame-Options",
                    "value": "DENY"
                  },
                  {
                    "key": "X-Request-Id",
                    "value": "b7198cca-6794-1546-2d93-dd031356217b"
                  },
                  {
                    "key": "X-Xss-Protection",
                    "value": "1; mode=block"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "max-age=14400"
                  },
                  {
                    "key": "cf-cache-status",
                    "value": "EXPIRED"
                  },
                  {
                    "key": "Server",
                    "value": "cloudflare"
                  },
                  {
                    "key": "CF-RAY",
                    "value": "97a059564ae29584-LHR"
                  },
                  {
                    "key": "server-timing",
                    "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
                  }
                ],
                "httpVersion": "1.1"
              }
            }
          ]
        }
      }
    }
  ],
  "beforeTest": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
      },
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "a3447906-ff68-4025-9d6f-6493c259f132",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
              "});",
              "",
              "",
              "pm.test(\"Validate the structure of the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(function(user) {",
              "        pm.expect(user).to.be.an('object');",
              "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Email is in a valid format within the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(user => {",
              "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              ""
            ]
          }
        }
      ],
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
      },
      "events": [
        {
          "listen": "test",
          "script": {
            "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Failing - Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Failing - Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
              "});",
              "",
              "",
              "pm.test(\"Failing - Validate the structure of the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(function(user) {",
              "        pm.expect(user).to.be.an('object');",
              "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(user => {",
              "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Failing - Response time is less than 200ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              ""
            ]
          }
        }
      ],
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ]
            }
          }
        ]
      }
    }
  ],
  "beforeScript": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132"
      },
      "script": {
        "id": "a3447906-ff68-4025-9d6f-6493c259f132",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "pm.test(\"Response status code is 200\", function () {",
          "    pm.expect(pm.response.code).to.equal(200);",
          "});",
          "",
          "",
          "pm.test(\"Response has the required fields\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
          "});",
          "",
          "",
          "pm.test(\"Validate the structure of the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(function(user) {",
          "        pm.expect(user).to.be.an('object');",
          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Email is in a valid format within the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(user => {",
          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Response time is less than 200ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          ""
        ],
        "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "event": {
        "listen": "test",
        "script": {
          "id": "a3447906-ff68-4025-9d6f-6493c259f132",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            "pm.test(\"Response status code is 200\", function () {",
            "    pm.expect(pm.response.code).to.equal(200);",
            "});",
            "",
            "",
            "pm.test(\"Response has the required fields\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
            "});",
            "",
            "",
            "pm.test(\"Validate the structure of the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(function(user) {",
            "        pm.expect(user).to.be.an('object');",
            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Email is in a valid format within the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(user => {",
            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Response time is less than 200ms\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(200);",
            "});",
            ""
          ],
          "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
        }
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
        "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc"
      },
      "script": {
        "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "pm.test(\"Failing - Response status code is 200\", function () {",
          "    pm.expect(pm.response.code).to.equal(200);",
          "});",
          "",
          "",
          "pm.test(\"Failing - Response has the required fields\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
          "});",
          "",
          "",
          "pm.test(\"Failing - Validate the structure of the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(function(user) {",
          "        pm.expect(user).to.be.an('object');",
          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(user => {",
          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Failing - Response time is less than 200ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          ""
        ],
        "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
      },
      "event": {
        "listen": "test",
        "script": {
          "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            "pm.test(\"Failing - Response status code is 200\", function () {",
            "    pm.expect(pm.response.code).to.equal(200);",
            "});",
            "",
            "",
            "pm.test(\"Failing - Response has the required fields\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
            "});",
            "",
            "",
            "pm.test(\"Failing - Validate the structure of the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(function(user) {",
            "        pm.expect(user).to.be.an('object');",
            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(user => {",
            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Failing - Response time is less than 200ms\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(200);",
            "});",
            ""
          ],
          "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
        }
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    }
  ],
  "assertion": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
        "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "assertion": "Response status code is 200",
      "skipped": false,
      "error": null,
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
        "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "assertion": "Response has the required fields",
      "skipped": false,
      "error": null,
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
        "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "assertion": "Validate the structure of the data array",
      "skipped": false,
      "error": null,
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
        "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "assertion": "Email is in a valid format within the data array",
      "skipped": false,
      "error": null,
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
        "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
        "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
      },
      "assertion": "Failing - Response status code is 200",
      "skipped": false,
      "error": null,
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
        "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
        "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
      },
      "assertion": "Failing - Response has the required fields",
      "skipped": false,
      "error": null,
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
        "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
        "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
      },
      "assertion": "Failing - Response time is less than 200ms",
      "skipped": false,
      "error": null,
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    }
  ],
  "script": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
        "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132"
      },
      "execution": {
        "id": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70",
        "target": "test",
        "legacy": {
          "_itemId": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
          "_itemName": "users",
          "_itemPath": [
            "Sample",
            "users"
          ],
          "_eventItemName": "users"
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 2,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
          "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
          "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
          "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
        },
        "data": {},
        "cookies": [],
        "_variables": {
          "id": "69a2721c-935b-4710-a8f8-d7af16cd89e4",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "environment": {
          "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "collectionVariables": {
          "id": "241a8bdb-3084-4abb-8e84-2d6acfe308a3",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "globals": {
          "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dcfc39c2-5538-4593-8381-926f982713d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "return": {
          "async": false
        },
        "response": {
          "id": "9262640e-f74e-419a-b0cf-d5858b50d83c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Sep 2025 20:48:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "http://localhost:5173"
            },
            {
              "key": "etag",
              "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Ratelimit-Limit",
              "value": "100"
            },
            {
              "key": "Ratelimit-Policy",
              "value": "100;w=60"
            },
            {
              "key": "Ratelimit-Remaining",
              "value": "98"
            },
            {
              "key": "Ratelimit-Reset",
              "value": "60"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Request-Id",
              "value": "e1941749-7b60-e36e-8d77-156b64e83683"
            },
            {
              "key": "X-Xss-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Age",
              "value": "2007"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "cf-cache-status",
              "value": "HIT"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "97a0595448929584-LHR"
            },
            {
              "key": "server-timing",
              "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              101,
              114,
              95,
              112,
              97,
              103,
              101,
              34,
              58,
              54,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              95,
              112,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              101,
              111,
              114,
              103,
              101,
              46,
              98,
              108,
              117,
              116,
              104,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              71,
              101,
              111,
              114,
              103,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              108,
              117,
              116,
              104,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              49,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              97,
              110,
              101,
              116,
              46,
              119,
              101,
              97,
              118,
              101,
              114,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              110,
              101,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              101,
              97,
              118,
              101,
              114,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              50,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              109,
              109,
              97,
              46,
              119,
              111,
              110,
              103,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              109,
              109,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              87,
              111,
              110,
              103,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              51,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              118,
              101,
              46,
              104,
              111,
              108,
              116,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              118,
              101,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              72,
              111,
              108,
              116,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              52,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              99,
              104,
              97,
              114,
              108,
              101,
              115,
              46,
              109,
              111,
              114,
              114,
              105,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              114,
              108,
              101,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              111,
              114,
              114,
              105,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              53,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              114,
              97,
              99,
              101,
              121,
              46,
              114,
              97,
              109,
              111,
              115,
              64,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              114,
              97,
              99,
              101,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              95,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              97,
              109,
              111,
              115,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              114,
              101,
              113,
              114,
              101,
              115,
              46,
              105,
              110,
              47,
              105,
              109,
              103,
              47,
              102,
              97,
              99,
              101,
              115,
              47,
              54,
              45,
              105,
              109,
              97,
              103,
              101,
              46,
              106,
              112,
              103,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              99,
              97,
              100,
              100,
              121,
              46,
              105,
              111,
              63,
              117,
              116,
              109,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              114,
              101,
              113,
              114,
              101,
              115,
              38,
              117,
              116,
              109,
              95,
              109,
              101,
              100,
              105,
              117,
              109,
              61,
              106,
              115,
              111,
              110,
              38,
              117,
              116,
              109,
              95,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              61,
              114,
              101,
              102,
              101,
              114,
              114,
              97,
              108,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              105,
              114,
              101,
              100,
              32,
              111,
              102,
              32,
              119,
              114,
              105,
              116,
              105,
              110,
              103,
              32,
              101,
              110,
              100,
              108,
              101,
              115,
              115,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              32,
              109,
              101,
              100,
              105,
              97,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              63,
              32,
              76,
              101,
              116,
              32,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              32,
              67,
              97,
              100,
              100,
              121,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              46,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 580,
          "responseSize": 1054
        }
      },
      "script": {
        "id": "a3447906-ff68-4025-9d6f-6493c259f132",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "pm.test(\"Response status code is 200\", function () {",
          "    pm.expect(pm.response.code).to.equal(200);",
          "});",
          "",
          "",
          "pm.test(\"Response has the required fields\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
          "});",
          "",
          "",
          "pm.test(\"Validate the structure of the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(function(user) {",
          "        pm.expect(user).to.be.an('object');",
          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Email is in a valid format within the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(user => {",
          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Response time is less than 200ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          ""
        ],
        "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
      },
      "event": {
        "listen": "test",
        "script": {
          "id": "a3447906-ff68-4025-9d6f-6493c259f132",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            "pm.test(\"Response status code is 200\", function () {",
            "    pm.expect(pm.response.code).to.equal(200);",
            "});",
            "",
            "",
            "pm.test(\"Response has the required fields\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
            "});",
            "",
            "",
            "pm.test(\"Validate the structure of the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(function(user) {",
            "        pm.expect(user).to.be.an('object');",
            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Email is in a valid format within the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(user => {",
            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Response time is less than 200ms\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(200);",
            "});",
            ""
          ],
          "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
        }
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
        "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc"
      },
      "execution": {
        "id": "470cf04d-3423-4636-925c-464cfbc7573d",
        "target": "test",
        "legacy": {
          "_itemId": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
          "_itemName": "failing-users",
          "_itemPath": [
            "Sample",
            "failing-users"
          ],
          "_eventItemName": "failing-users"
        },
        "cursor": {
          "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
          "length": 2,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
          "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
          "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
        },
        "data": {},
        "cookies": [],
        "_variables": {
          "id": "69a2721c-935b-4710-a8f8-d7af16cd89e4",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "environment": {
          "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "collectionVariables": {
          "id": "241a8bdb-3084-4abb-8e84-2d6acfe308a3",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "globals": {
          "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
          "mutations": {
            "autoCompact": true,
            "stream": [],
            "compacted": {}
          },
          "values": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
              "system": true
            },
            {
              "key": "Host",
              "value": "reqres.in",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "return": {
          "async": false
        },
        "response": {
          "id": "d006f2d6-4258-442f-9a59-9b1e8e2fec35",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Thu, 04 Sep 2025 20:48:39 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
            },
            {
              "key": "Access-Control-Allow-Methods",
              "value": "GET, POST, PUT, DELETE, OPTIONS"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "http://localhost:5173"
            },
            {
              "key": "Etag",
              "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
            },
            {
              "key": "Ratelimit-Limit",
              "value": "100"
            },
            {
              "key": "Ratelimit-Policy",
              "value": "100;w=60"
            },
            {
              "key": "Ratelimit-Remaining",
              "value": "98"
            },
            {
              "key": "Ratelimit-Reset",
              "value": "60"
            },
            {
              "key": "Referrer-Policy",
              "value": "strict-origin-when-cross-origin"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Via",
              "value": "1.1 heroku-router"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "X-Frame-Options",
              "value": "DENY"
            },
            {
              "key": "X-Request-Id",
              "value": "b7198cca-6794-1546-2d93-dd031356217b"
            },
            {
              "key": "X-Xss-Protection",
              "value": "1; mode=block"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=14400"
            },
            {
              "key": "cf-cache-status",
              "value": "EXPIRED"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "CF-RAY",
              "value": "97a059564ae29584-LHR"
            },
            {
              "key": "server-timing",
              "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              112,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              101,
              114,
              95,
              112,
              97,
              103,
              101,
              34,
              58,
              54,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              49,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              95,
              112,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              49,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              99,
              101,
              114,
              117,
              108,
              101,
              97,
              110,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              48,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              57,
              56,
              66,
              50,
              68,
              49,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              53,
              45,
              52,
              48,
              50,
              48,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              50,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              102,
              117,
              99,
              104,
              115,
              105,
              97,
              32,
              114,
              111,
              115,
              101,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              49,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              67,
              55,
              52,
              51,
              55,
              53,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              55,
              45,
              50,
              48,
              51,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              51,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              114,
              117,
              101,
              32,
              114,
              101,
              100,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              50,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              66,
              70,
              49,
              57,
              51,
              50,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              57,
              45,
              49,
              54,
              54,
              52,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              52,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              97,
              113,
              117,
              97,
              32,
              115,
              107,
              121,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              51,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              55,
              66,
              67,
              52,
              67,
              52,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              52,
              45,
              52,
              56,
              49,
              49,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              53,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              105,
              103,
              101,
              114,
              108,
              105,
              108,
              121,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              52,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              69,
              50,
              53,
              56,
              51,
              69,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              55,
              45,
              49,
              52,
              53,
              54,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              54,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              98,
              108,
              117,
              101,
              32,
              116,
              117,
              114,
              113,
              117,
              111,
              105,
              115,
              101,
              34,
              44,
              34,
              121,
              101,
              97,
              114,
              34,
              58,
              50,
              48,
              48,
              53,
              44,
              34,
              99,
              111,
              108,
              111,
              114,
              34,
              58,
              34,
              35,
              53,
              51,
              66,
              48,
              65,
              69,
              34,
              44,
              34,
              112,
              97,
              110,
              116,
              111,
              110,
              101,
              95,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              34,
              49,
              53,
              45,
              53,
              50,
              49,
              55,
              34,
              125,
              93,
              44,
              34,
              115,
              117,
              112,
              112,
              111,
              114,
              116,
              34,
              58,
              123,
              34,
              117,
              114,
              108,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              99,
              97,
              100,
              100,
              121,
              46,
              105,
              111,
              63,
              117,
              116,
              109,
              95,
              115,
              111,
              117,
              114,
              99,
              101,
              61,
              114,
              101,
              113,
              114,
              101,
              115,
              38,
              117,
              116,
              109,
              95,
              109,
              101,
              100,
              105,
              117,
              109,
              61,
              106,
              115,
              111,
              110,
              38,
              117,
              116,
              109,
              95,
              99,
              97,
              109,
              112,
              97,
              105,
              103,
              110,
              61,
              114,
              101,
              102,
              101,
              114,
              114,
              97,
              108,
              34,
              44,
              34,
              116,
              101,
              120,
              116,
              34,
              58,
              34,
              84,
              105,
              114,
              101,
              100,
              32,
              111,
              102,
              32,
              119,
              114,
              105,
              116,
              105,
              110,
              103,
              32,
              101,
              110,
              100,
              108,
              101,
              115,
              115,
              32,
              115,
              111,
              99,
              105,
              97,
              108,
              32,
              109,
              101,
              100,
              105,
              97,
              32,
              99,
              111,
              110,
              116,
              101,
              110,
              116,
              63,
              32,
              76,
              101,
              116,
              32,
              67,
              111,
              110,
              116,
              101,
              110,
              116,
              32,
              67,
              97,
              100,
              100,
              121,
              32,
              103,
              101,
              110,
              101,
              114,
              97,
              116,
              101,
              32,
              105,
              116,
              32,
              102,
              111,
              114,
              32,
              121,
              111,
              117,
              46,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 168,
          "responseSize": 763
        }
      },
      "script": {
        "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
        "type": "text/javascript",
        "packages": {},
        "exec": [
          "pm.test(\"Failing - Response status code is 200\", function () {",
          "    pm.expect(pm.response.code).to.equal(200);",
          "});",
          "",
          "",
          "pm.test(\"Failing - Response has the required fields\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
          "});",
          "",
          "",
          "pm.test(\"Failing - Validate the structure of the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(function(user) {",
          "        pm.expect(user).to.be.an('object');",
          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
          "    const responseData = pm.response.json();",
          "    ",
          "    pm.expect(responseData).to.be.an('object');",
          "    pm.expect(responseData.data).to.be.an('array');",
          "",
          "    responseData.data.forEach(user => {",
          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
          "    });",
          "});",
          "",
          "",
          "pm.test(\"Failing - Response time is less than 200ms\", function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(200);",
          "});",
          ""
        ],
        "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
      },
      "event": {
        "listen": "test",
        "script": {
          "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            "pm.test(\"Failing - Response status code is 200\", function () {",
            "    pm.expect(pm.response.code).to.equal(200);",
            "});",
            "",
            "",
            "pm.test(\"Failing - Response has the required fields\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
            "});",
            "",
            "",
            "pm.test(\"Failing - Validate the structure of the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(function(user) {",
            "        pm.expect(user).to.be.an('object');",
            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
            "    const responseData = pm.response.json();",
            "    ",
            "    pm.expect(responseData).to.be.an('object');",
            "    pm.expect(responseData.data).to.be.an('array');",
            "",
            "    responseData.data.forEach(user => {",
            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
            "    });",
            "});",
            "",
            "",
            "pm.test(\"Failing - Response time is less than 200ms\", function () {",
            "    pm.expect(pm.response.responseTime).to.be.below(200);",
            "});",
            ""
          ],
          "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
        }
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    }
  ],
  "test": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
      },
      "executions": [
        {
          "event": {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          },
          "script": {
            "id": "a3447906-ff68-4025-9d6f-6493c259f132",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
              "});",
              "",
              "",
              "pm.test(\"Validate the structure of the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(function(user) {",
              "        pm.expect(user).to.be.an('object');",
              "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Email is in a valid format within the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(user => {",
              "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Response time is less than 200ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              ""
            ],
            "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
          },
          "result": {
            "id": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70",
            "target": "test",
            "legacy": {
              "_itemId": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "_itemName": "users",
              "_itemPath": [
                "Sample",
                "users"
              ],
              "_eventItemName": "users"
            },
            "cursor": {
              "position": 0,
              "iteration": 0,
              "length": 2,
              "cycles": 1,
              "empty": false,
              "eof": false,
              "bof": true,
              "cr": false,
              "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
              "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
              "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
              "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            },
            "data": {},
            "cookies": [],
            "_variables": {
              "id": "69a2721c-935b-4710-a8f8-d7af16cd89e4",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "environment": {
              "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "collectionVariables": {
              "id": "241a8bdb-3084-4abb-8e84-2d6acfe308a3",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "globals": {
              "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                },
                {
                  "key": "User-Agent",
                  "value": "PostmanRuntime/7.39.1",
                  "system": true
                },
                {
                  "key": "Accept",
                  "value": "*/*",
                  "system": true
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache",
                  "system": true
                },
                {
                  "key": "Postman-Token",
                  "value": "dcfc39c2-5538-4593-8381-926f982713d3",
                  "system": true
                },
                {
                  "key": "Host",
                  "value": "reqres.in",
                  "system": true
                },
                {
                  "key": "Accept-Encoding",
                  "value": "gzip, deflate, br",
                  "system": true
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "system": true
                }
              ],
              "method": "GET"
            },
            "return": {
              "async": false
            },
            "response": {
              "id": "9262640e-f74e-419a-b0cf-d5858b50d83c",
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Date",
                  "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Access-Control-Allow-Headers",
                  "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                },
                {
                  "key": "Access-Control-Allow-Methods",
                  "value": "GET, POST, PUT, DELETE, OPTIONS"
                },
                {
                  "key": "Access-Control-Allow-Origin",
                  "value": "http://localhost:5173"
                },
                {
                  "key": "etag",
                  "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
                },
                {
                  "key": "Nel",
                  "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                },
                {
                  "key": "Ratelimit-Limit",
                  "value": "100"
                },
                {
                  "key": "Ratelimit-Policy",
                  "value": "100;w=60"
                },
                {
                  "key": "Ratelimit-Remaining",
                  "value": "98"
                },
                {
                  "key": "Ratelimit-Reset",
                  "value": "60"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin"
                },
                {
                  "key": "Report-To",
                  "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
                },
                {
                  "key": "Reporting-Endpoints",
                  "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Via",
                  "value": "1.1 heroku-router"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "DENY"
                },
                {
                  "key": "X-Request-Id",
                  "value": "e1941749-7b60-e36e-8d77-156b64e83683"
                },
                {
                  "key": "X-Xss-Protection",
                  "value": "1; mode=block"
                },
                {
                  "key": "Age",
                  "value": "2007"
                },
                {
                  "key": "Cache-Control",
                  "value": "max-age=14400"
                },
                {
                  "key": "cf-cache-status",
                  "value": "HIT"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "CF-RAY",
                  "value": "97a0595448929584-LHR"
                },
                {
                  "key": "server-timing",
                  "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
                }
              ],
              "stream": {
                "type": "Buffer",
                "data": [
                  123,
                  34,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  49,
                  44,
                  34,
                  112,
                  101,
                  114,
                  95,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  54,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  34,
                  58,
                  49,
                  50,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  95,
                  112,
                  97,
                  103,
                  101,
                  115,
                  34,
                  58,
                  50,
                  44,
                  34,
                  100,
                  97,
                  116,
                  97,
                  34,
                  58,
                  91,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  49,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  103,
                  101,
                  111,
                  114,
                  103,
                  101,
                  46,
                  98,
                  108,
                  117,
                  116,
                  104,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  71,
                  101,
                  111,
                  114,
                  103,
                  101,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  66,
                  108,
                  117,
                  116,
                  104,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  49,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  50,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  106,
                  97,
                  110,
                  101,
                  116,
                  46,
                  119,
                  101,
                  97,
                  118,
                  101,
                  114,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  74,
                  97,
                  110,
                  101,
                  116,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  87,
                  101,
                  97,
                  118,
                  101,
                  114,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  50,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  51,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  101,
                  109,
                  109,
                  97,
                  46,
                  119,
                  111,
                  110,
                  103,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  69,
                  109,
                  109,
                  97,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  87,
                  111,
                  110,
                  103,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  51,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  52,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  101,
                  118,
                  101,
                  46,
                  104,
                  111,
                  108,
                  116,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  69,
                  118,
                  101,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  72,
                  111,
                  108,
                  116,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  52,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  53,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  99,
                  104,
                  97,
                  114,
                  108,
                  101,
                  115,
                  46,
                  109,
                  111,
                  114,
                  114,
                  105,
                  115,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  67,
                  104,
                  97,
                  114,
                  108,
                  101,
                  115,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  77,
                  111,
                  114,
                  114,
                  105,
                  115,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  53,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  54,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  116,
                  114,
                  97,
                  99,
                  101,
                  121,
                  46,
                  114,
                  97,
                  109,
                  111,
                  115,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  84,
                  114,
                  97,
                  99,
                  101,
                  121,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  82,
                  97,
                  109,
                  111,
                  115,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  54,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  93,
                  44,
                  34,
                  115,
                  117,
                  112,
                  112,
                  111,
                  114,
                  116,
                  34,
                  58,
                  123,
                  34,
                  117,
                  114,
                  108,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  99,
                  97,
                  100,
                  100,
                  121,
                  46,
                  105,
                  111,
                  63,
                  117,
                  116,
                  109,
                  95,
                  115,
                  111,
                  117,
                  114,
                  99,
                  101,
                  61,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  38,
                  117,
                  116,
                  109,
                  95,
                  109,
                  101,
                  100,
                  105,
                  117,
                  109,
                  61,
                  106,
                  115,
                  111,
                  110,
                  38,
                  117,
                  116,
                  109,
                  95,
                  99,
                  97,
                  109,
                  112,
                  97,
                  105,
                  103,
                  110,
                  61,
                  114,
                  101,
                  102,
                  101,
                  114,
                  114,
                  97,
                  108,
                  34,
                  44,
                  34,
                  116,
                  101,
                  120,
                  116,
                  34,
                  58,
                  34,
                  84,
                  105,
                  114,
                  101,
                  100,
                  32,
                  111,
                  102,
                  32,
                  119,
                  114,
                  105,
                  116,
                  105,
                  110,
                  103,
                  32,
                  101,
                  110,
                  100,
                  108,
                  101,
                  115,
                  115,
                  32,
                  115,
                  111,
                  99,
                  105,
                  97,
                  108,
                  32,
                  109,
                  101,
                  100,
                  105,
                  97,
                  32,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  63,
                  32,
                  76,
                  101,
                  116,
                  32,
                  67,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  32,
                  67,
                  97,
                  100,
                  100,
                  121,
                  32,
                  103,
                  101,
                  110,
                  101,
                  114,
                  97,
                  116,
                  101,
                  32,
                  105,
                  116,
                  32,
                  102,
                  111,
                  114,
                  32,
                  121,
                  111,
                  117,
                  46,
                  34,
                  125,
                  125
                ]
              },
              "cookie": [],
              "responseTime": 580,
              "responseSize": 1054
            }
          }
        }
      ],
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
      },
      "executions": [
        {
          "event": {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          },
          "script": {
            "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
            "type": "text/javascript",
            "packages": {},
            "exec": [
              "pm.test(\"Failing - Response status code is 200\", function () {",
              "    pm.expect(pm.response.code).to.equal(200);",
              "});",
              "",
              "",
              "pm.test(\"Failing - Response has the required fields\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
              "});",
              "",
              "",
              "pm.test(\"Failing - Validate the structure of the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(function(user) {",
              "        pm.expect(user).to.be.an('object');",
              "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
              "    const responseData = pm.response.json();",
              "    ",
              "    pm.expect(responseData).to.be.an('object');",
              "    pm.expect(responseData.data).to.be.an('array');",
              "",
              "    responseData.data.forEach(user => {",
              "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
              "    });",
              "});",
              "",
              "",
              "pm.test(\"Failing - Response time is less than 200ms\", function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(200);",
              "});",
              ""
            ],
            "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
          },
          "result": {
            "id": "470cf04d-3423-4636-925c-464cfbc7573d",
            "target": "test",
            "legacy": {
              "_itemId": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "_itemName": "failing-users",
              "_itemPath": [
                "Sample",
                "failing-users"
              ],
              "_eventItemName": "failing-users"
            },
            "cursor": {
              "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
              "length": 2,
              "cycles": 1,
              "position": 1,
              "iteration": 0,
              "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
              "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
            },
            "data": {},
            "cookies": [],
            "_variables": {
              "id": "69a2721c-935b-4710-a8f8-d7af16cd89e4",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "environment": {
              "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "collectionVariables": {
              "id": "241a8bdb-3084-4abb-8e84-2d6acfe308a3",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "globals": {
              "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
              "mutations": {
                "autoCompact": true,
                "stream": [],
                "compacted": {}
              },
              "values": []
            },
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users-failing"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                },
                {
                  "key": "User-Agent",
                  "value": "PostmanRuntime/7.39.1",
                  "system": true
                },
                {
                  "key": "Accept",
                  "value": "*/*",
                  "system": true
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache",
                  "system": true
                },
                {
                  "key": "Postman-Token",
                  "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
                  "system": true
                },
                {
                  "key": "Host",
                  "value": "reqres.in",
                  "system": true
                },
                {
                  "key": "Accept-Encoding",
                  "value": "gzip, deflate, br",
                  "system": true
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "system": true
                }
              ],
              "method": "GET"
            },
            "return": {
              "async": false
            },
            "response": {
              "id": "d006f2d6-4258-442f-9a59-9b1e8e2fec35",
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Date",
                  "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Access-Control-Allow-Headers",
                  "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                },
                {
                  "key": "Access-Control-Allow-Methods",
                  "value": "GET, POST, PUT, DELETE, OPTIONS"
                },
                {
                  "key": "Access-Control-Allow-Origin",
                  "value": "http://localhost:5173"
                },
                {
                  "key": "Etag",
                  "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
                },
                {
                  "key": "Nel",
                  "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                },
                {
                  "key": "Ratelimit-Limit",
                  "value": "100"
                },
                {
                  "key": "Ratelimit-Policy",
                  "value": "100;w=60"
                },
                {
                  "key": "Ratelimit-Remaining",
                  "value": "98"
                },
                {
                  "key": "Ratelimit-Reset",
                  "value": "60"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin"
                },
                {
                  "key": "Report-To",
                  "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
                },
                {
                  "key": "Reporting-Endpoints",
                  "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Via",
                  "value": "1.1 heroku-router"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "DENY"
                },
                {
                  "key": "X-Request-Id",
                  "value": "b7198cca-6794-1546-2d93-dd031356217b"
                },
                {
                  "key": "X-Xss-Protection",
                  "value": "1; mode=block"
                },
                {
                  "key": "Cache-Control",
                  "value": "max-age=14400"
                },
                {
                  "key": "cf-cache-status",
                  "value": "EXPIRED"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "CF-RAY",
                  "value": "97a059564ae29584-LHR"
                },
                {
                  "key": "server-timing",
                  "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
                }
              ],
              "stream": {
                "type": "Buffer",
                "data": [
                  123,
                  34,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  49,
                  44,
                  34,
                  112,
                  101,
                  114,
                  95,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  54,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  34,
                  58,
                  49,
                  50,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  95,
                  112,
                  97,
                  103,
                  101,
                  115,
                  34,
                  58,
                  50,
                  44,
                  34,
                  100,
                  97,
                  116,
                  97,
                  34,
                  58,
                  91,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  49,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  99,
                  101,
                  114,
                  117,
                  108,
                  101,
                  97,
                  110,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  48,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  57,
                  56,
                  66,
                  50,
                  68,
                  49,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  53,
                  45,
                  52,
                  48,
                  50,
                  48,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  50,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  102,
                  117,
                  99,
                  104,
                  115,
                  105,
                  97,
                  32,
                  114,
                  111,
                  115,
                  101,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  49,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  67,
                  55,
                  52,
                  51,
                  55,
                  53,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  55,
                  45,
                  50,
                  48,
                  51,
                  49,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  51,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  116,
                  114,
                  117,
                  101,
                  32,
                  114,
                  101,
                  100,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  50,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  66,
                  70,
                  49,
                  57,
                  51,
                  50,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  57,
                  45,
                  49,
                  54,
                  54,
                  52,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  52,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  97,
                  113,
                  117,
                  97,
                  32,
                  115,
                  107,
                  121,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  51,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  55,
                  66,
                  67,
                  52,
                  67,
                  52,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  52,
                  45,
                  52,
                  56,
                  49,
                  49,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  53,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  116,
                  105,
                  103,
                  101,
                  114,
                  108,
                  105,
                  108,
                  121,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  52,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  69,
                  50,
                  53,
                  56,
                  51,
                  69,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  55,
                  45,
                  49,
                  52,
                  53,
                  54,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  54,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  98,
                  108,
                  117,
                  101,
                  32,
                  116,
                  117,
                  114,
                  113,
                  117,
                  111,
                  105,
                  115,
                  101,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  53,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  53,
                  51,
                  66,
                  48,
                  65,
                  69,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  53,
                  45,
                  53,
                  50,
                  49,
                  55,
                  34,
                  125,
                  93,
                  44,
                  34,
                  115,
                  117,
                  112,
                  112,
                  111,
                  114,
                  116,
                  34,
                  58,
                  123,
                  34,
                  117,
                  114,
                  108,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  99,
                  97,
                  100,
                  100,
                  121,
                  46,
                  105,
                  111,
                  63,
                  117,
                  116,
                  109,
                  95,
                  115,
                  111,
                  117,
                  114,
                  99,
                  101,
                  61,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  38,
                  117,
                  116,
                  109,
                  95,
                  109,
                  101,
                  100,
                  105,
                  117,
                  109,
                  61,
                  106,
                  115,
                  111,
                  110,
                  38,
                  117,
                  116,
                  109,
                  95,
                  99,
                  97,
                  109,
                  112,
                  97,
                  105,
                  103,
                  110,
                  61,
                  114,
                  101,
                  102,
                  101,
                  114,
                  114,
                  97,
                  108,
                  34,
                  44,
                  34,
                  116,
                  101,
                  120,
                  116,
                  34,
                  58,
                  34,
                  84,
                  105,
                  114,
                  101,
                  100,
                  32,
                  111,
                  102,
                  32,
                  119,
                  114,
                  105,
                  116,
                  105,
                  110,
                  103,
                  32,
                  101,
                  110,
                  100,
                  108,
                  101,
                  115,
                  115,
                  32,
                  115,
                  111,
                  99,
                  105,
                  97,
                  108,
                  32,
                  109,
                  101,
                  100,
                  105,
                  97,
                  32,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  63,
                  32,
                  76,
                  101,
                  116,
                  32,
                  67,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  32,
                  67,
                  97,
                  100,
                  100,
                  121,
                  32,
                  103,
                  101,
                  110,
                  101,
                  114,
                  97,
                  116,
                  101,
                  32,
                  105,
                  116,
                  32,
                  102,
                  111,
                  114,
                  32,
                  121,
                  111,
                  117,
                  46,
                  34,
                  125,
                  125
                ]
              },
              "cookie": [],
              "responseTime": 168,
              "responseSize": 763
            }
          }
        }
      ],
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    }
  ],
  "item": [
    {
      "cursor": {
        "position": 0,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": true,
        "cr": false,
        "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
        "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
      },
      "item": {
        "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
        "name": "users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3447906-ff68-4025-9d6f-6493c259f132",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          }
        ]
      }
    },
    {
      "cursor": {
        "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
      },
      "item": {
        "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
        "name": "failing-users",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "api",
              "users-failing"
            ],
            "host": [
              "reqres",
              "in"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-api-key",
              "value": "reqres-free-v1"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Failing - Response status code is 200\", function () {",
                "    pm.expect(pm.response.code).to.equal(200);",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response has the required fields\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                "});",
                "",
                "",
                "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(function(user) {",
                "        pm.expect(user).to.be.an('object');",
                "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                "    const responseData = pm.response.json();",
                "    ",
                "    pm.expect(responseData).to.be.an('object');",
                "    pm.expect(responseData.data).to.be.an('array');",
                "",
                "    responseData.data.forEach(user => {",
                "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                "    });",
                "});",
                "",
                "",
                "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                "    pm.expect(pm.response.responseTime).to.be.below(200);",
                "});",
                ""
              ],
              "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ]
      }
    }
  ],
  "iteration": [
    {
      "cursor": {
        "ref": "5931b7f7-0ded-42d9-a38c-1877ee159f30",
        "length": 2,
        "cycles": 1,
        "position": 1,
        "iteration": 0,
        "eof": true
      }
    }
  ],
  "beforeDone": [
    {
      "cursor": {
        "position": 1,
        "iteration": 0,
        "length": 2,
        "cycles": 1,
        "empty": false,
        "eof": false,
        "bof": false,
        "cr": false,
        "ref": "5931b7f7-0ded-42d9-a38c-1877ee159f30"
      },
      "summary": {
        "collection": {
          "_": {
            "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
            "exporter_id": "13334035"
          },
          "item": [
            {
              "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "name": "users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                  }
                }
              ]
            },
            {
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "name": "failing-users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Failing - Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                  }
                }
              ]
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
            "name": "Sample",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "environment": {
          "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
          "values": []
        },
        "globals": {
          "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
          "values": []
        },
        "run": {
          "stats": {
            "iterations": {
              "total": 1,
              "pending": 0,
              "failed": 0
            },
            "items": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "scripts": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "prerequests": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "requests": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "tests": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "assertions": {
              "total": 10,
              "pending": 0,
              "failed": 3
            },
            "testScripts": {
              "total": 2,
              "pending": 0,
              "failed": 0
            },
            "prerequestScripts": {
              "total": 0,
              "pending": 0,
              "failed": 0
            }
          },
          "timings": {
            "responseAverage": 374,
            "responseMin": 168,
            "responseMax": 580,
            "responseSd": 206,
            "dnsAverage": 0,
            "dnsMin": 0,
            "dnsMax": 0,
            "dnsSd": 0,
            "firstByteAverage": 0,
            "firstByteMin": 0,
            "firstByteMax": 0,
            "firstByteSd": 0,
            "started": 1757018918260,
            "completed": 1757018919292
          },
          "executions": [
            {
              "cursor": {
                "position": 0,
                "iteration": 0,
                "length": 2,
                "cycles": 1,
                "empty": false,
                "eof": false,
                "bof": true,
                "cr": false,
                "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
                "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
              },
              "item": {
                "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                "name": "users",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "api",
                      "users"
                    ],
                    "host": [
                      "reqres",
                      "in"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-api-key",
                      "value": "reqres-free-v1"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Response status code is 200\", function () {",
                        "    pm.expect(pm.response.code).to.equal(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response has the required fields\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                        "});",
                        "",
                        "",
                        "pm.test(\"Validate the structure of the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(function(user) {",
                        "        pm.expect(user).to.be.an('object');",
                        "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Email is in a valid format within the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(user => {",
                        "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 200ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(200);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "dcfc39c2-5538-4593-8381-926f982713d3",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "reqres.in",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "response": {
                "id": "9262640e-f74e-419a-b0cf-d5858b50d83c",
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "key": "Date",
                    "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Transfer-Encoding",
                    "value": "chunked"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Content-Encoding",
                    "value": "br"
                  },
                  {
                    "key": "Access-Control-Allow-Credentials",
                    "value": "true"
                  },
                  {
                    "key": "Access-Control-Allow-Headers",
                    "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                  },
                  {
                    "key": "Access-Control-Allow-Methods",
                    "value": "GET, POST, PUT, DELETE, OPTIONS"
                  },
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "http://localhost:5173"
                  },
                  {
                    "key": "etag",
                    "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
                  },
                  {
                    "key": "Nel",
                    "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                  },
                  {
                    "key": "Ratelimit-Limit",
                    "value": "100"
                  },
                  {
                    "key": "Ratelimit-Policy",
                    "value": "100;w=60"
                  },
                  {
                    "key": "Ratelimit-Remaining",
                    "value": "98"
                  },
                  {
                    "key": "Ratelimit-Reset",
                    "value": "60"
                  },
                  {
                    "key": "Referrer-Policy",
                    "value": "strict-origin-when-cross-origin"
                  },
                  {
                    "key": "Report-To",
                    "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
                  },
                  {
                    "key": "Reporting-Endpoints",
                    "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
                  },
                  {
                    "key": "Vary",
                    "value": "Origin, Accept-Encoding"
                  },
                  {
                    "key": "Via",
                    "value": "1.1 heroku-router"
                  },
                  {
                    "key": "X-Content-Type-Options",
                    "value": "nosniff"
                  },
                  {
                    "key": "X-Frame-Options",
                    "value": "DENY"
                  },
                  {
                    "key": "X-Request-Id",
                    "value": "e1941749-7b60-e36e-8d77-156b64e83683"
                  },
                  {
                    "key": "X-Xss-Protection",
                    "value": "1; mode=block"
                  },
                  {
                    "key": "Age",
                    "value": "2007"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "max-age=14400"
                  },
                  {
                    "key": "cf-cache-status",
                    "value": "HIT"
                  },
                  {
                    "key": "Server",
                    "value": "cloudflare"
                  },
                  {
                    "key": "CF-RAY",
                    "value": "97a0595448929584-LHR"
                  },
                  {
                    "key": "server-timing",
                    "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
                  }
                ],
                "stream": {
                  "type": "Buffer",
                  "data": [
                    123,
                    34,
                    112,
                    97,
                    103,
                    101,
                    34,
                    58,
                    49,
                    44,
                    34,
                    112,
                    101,
                    114,
                    95,
                    112,
                    97,
                    103,
                    101,
                    34,
                    58,
                    54,
                    44,
                    34,
                    116,
                    111,
                    116,
                    97,
                    108,
                    34,
                    58,
                    49,
                    50,
                    44,
                    34,
                    116,
                    111,
                    116,
                    97,
                    108,
                    95,
                    112,
                    97,
                    103,
                    101,
                    115,
                    34,
                    58,
                    50,
                    44,
                    34,
                    100,
                    97,
                    116,
                    97,
                    34,
                    58,
                    91,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    49,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    103,
                    101,
                    111,
                    114,
                    103,
                    101,
                    46,
                    98,
                    108,
                    117,
                    116,
                    104,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    71,
                    101,
                    111,
                    114,
                    103,
                    101,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    66,
                    108,
                    117,
                    116,
                    104,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    49,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    50,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    106,
                    97,
                    110,
                    101,
                    116,
                    46,
                    119,
                    101,
                    97,
                    118,
                    101,
                    114,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    74,
                    97,
                    110,
                    101,
                    116,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    87,
                    101,
                    97,
                    118,
                    101,
                    114,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    50,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    51,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    101,
                    109,
                    109,
                    97,
                    46,
                    119,
                    111,
                    110,
                    103,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    69,
                    109,
                    109,
                    97,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    87,
                    111,
                    110,
                    103,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    51,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    52,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    101,
                    118,
                    101,
                    46,
                    104,
                    111,
                    108,
                    116,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    69,
                    118,
                    101,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    72,
                    111,
                    108,
                    116,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    52,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    53,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    99,
                    104,
                    97,
                    114,
                    108,
                    101,
                    115,
                    46,
                    109,
                    111,
                    114,
                    114,
                    105,
                    115,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    67,
                    104,
                    97,
                    114,
                    108,
                    101,
                    115,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    77,
                    111,
                    114,
                    114,
                    105,
                    115,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    53,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    54,
                    44,
                    34,
                    101,
                    109,
                    97,
                    105,
                    108,
                    34,
                    58,
                    34,
                    116,
                    114,
                    97,
                    99,
                    101,
                    121,
                    46,
                    114,
                    97,
                    109,
                    111,
                    115,
                    64,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    34,
                    44,
                    34,
                    102,
                    105,
                    114,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    84,
                    114,
                    97,
                    99,
                    101,
                    121,
                    34,
                    44,
                    34,
                    108,
                    97,
                    115,
                    116,
                    95,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    82,
                    97,
                    109,
                    111,
                    115,
                    34,
                    44,
                    34,
                    97,
                    118,
                    97,
                    116,
                    97,
                    114,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    46,
                    105,
                    110,
                    47,
                    105,
                    109,
                    103,
                    47,
                    102,
                    97,
                    99,
                    101,
                    115,
                    47,
                    54,
                    45,
                    105,
                    109,
                    97,
                    103,
                    101,
                    46,
                    106,
                    112,
                    103,
                    34,
                    125,
                    93,
                    44,
                    34,
                    115,
                    117,
                    112,
                    112,
                    111,
                    114,
                    116,
                    34,
                    58,
                    123,
                    34,
                    117,
                    114,
                    108,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    99,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    99,
                    97,
                    100,
                    100,
                    121,
                    46,
                    105,
                    111,
                    63,
                    117,
                    116,
                    109,
                    95,
                    115,
                    111,
                    117,
                    114,
                    99,
                    101,
                    61,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    38,
                    117,
                    116,
                    109,
                    95,
                    109,
                    101,
                    100,
                    105,
                    117,
                    109,
                    61,
                    106,
                    115,
                    111,
                    110,
                    38,
                    117,
                    116,
                    109,
                    95,
                    99,
                    97,
                    109,
                    112,
                    97,
                    105,
                    103,
                    110,
                    61,
                    114,
                    101,
                    102,
                    101,
                    114,
                    114,
                    97,
                    108,
                    34,
                    44,
                    34,
                    116,
                    101,
                    120,
                    116,
                    34,
                    58,
                    34,
                    84,
                    105,
                    114,
                    101,
                    100,
                    32,
                    111,
                    102,
                    32,
                    119,
                    114,
                    105,
                    116,
                    105,
                    110,
                    103,
                    32,
                    101,
                    110,
                    100,
                    108,
                    101,
                    115,
                    115,
                    32,
                    115,
                    111,
                    99,
                    105,
                    97,
                    108,
                    32,
                    109,
                    101,
                    100,
                    105,
                    97,
                    32,
                    99,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    63,
                    32,
                    76,
                    101,
                    116,
                    32,
                    67,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    32,
                    67,
                    97,
                    100,
                    100,
                    121,
                    32,
                    103,
                    101,
                    110,
                    101,
                    114,
                    97,
                    116,
                    101,
                    32,
                    105,
                    116,
                    32,
                    102,
                    111,
                    114,
                    32,
                    121,
                    111,
                    117,
                    46,
                    34,
                    125,
                    125
                  ]
                },
                "cookie": [],
                "responseTime": 580,
                "responseSize": 1054
              },
              "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "assertions": [
                {
                  "assertion": "Response status code is 200",
                  "skipped": false
                },
                {
                  "assertion": "Response has the required fields",
                  "skipped": false
                },
                {
                  "assertion": "Validate the structure of the data array",
                  "skipped": false
                },
                {
                  "assertion": "Email is in a valid format within the data array",
                  "skipped": false
                },
                {
                  "assertion": "Response time is less than 200ms",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 4,
                    "test": "Response time is less than 200ms",
                    "message": "expected 580 to be below 200",
                    "stack": "AssertionError: expected 580 to be below 200\n   at Object.eval sandbox-script.js:5:1)"
                  }
                }
              ]
            },
            {
              "cursor": {
                "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
                "length": 2,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
              },
              "item": {
                "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                "name": "failing-users",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "api",
                      "users-failing"
                    ],
                    "host": [
                      "reqres",
                      "in"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-api-key",
                      "value": "reqres-free-v1"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Failing - Response status code is 200\", function () {",
                        "    pm.expect(pm.response.code).to.equal(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response has the required fields\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(function(user) {",
                        "        pm.expect(user).to.be.an('object');",
                        "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(user => {",
                        "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(200);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                    }
                  }
                ]
              },
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  },
                  {
                    "key": "User-Agent",
                    "value": "PostmanRuntime/7.39.1",
                    "system": true
                  },
                  {
                    "key": "Accept",
                    "value": "*/*",
                    "system": true
                  },
                  {
                    "key": "Cache-Control",
                    "value": "no-cache",
                    "system": true
                  },
                  {
                    "key": "Postman-Token",
                    "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
                    "system": true
                  },
                  {
                    "key": "Host",
                    "value": "reqres.in",
                    "system": true
                  },
                  {
                    "key": "Accept-Encoding",
                    "value": "gzip, deflate, br",
                    "system": true
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive",
                    "system": true
                  }
                ],
                "method": "GET"
              },
              "response": {
                "id": "d006f2d6-4258-442f-9a59-9b1e8e2fec35",
                "status": "OK",
                "code": 200,
                "header": [
                  {
                    "key": "Date",
                    "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json; charset=utf-8"
                  },
                  {
                    "key": "Transfer-Encoding",
                    "value": "chunked"
                  },
                  {
                    "key": "Connection",
                    "value": "keep-alive"
                  },
                  {
                    "key": "Content-Encoding",
                    "value": "br"
                  },
                  {
                    "key": "Access-Control-Allow-Credentials",
                    "value": "true"
                  },
                  {
                    "key": "Access-Control-Allow-Headers",
                    "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                  },
                  {
                    "key": "Access-Control-Allow-Methods",
                    "value": "GET, POST, PUT, DELETE, OPTIONS"
                  },
                  {
                    "key": "Access-Control-Allow-Origin",
                    "value": "http://localhost:5173"
                  },
                  {
                    "key": "Etag",
                    "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
                  },
                  {
                    "key": "Nel",
                    "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                  },
                  {
                    "key": "Ratelimit-Limit",
                    "value": "100"
                  },
                  {
                    "key": "Ratelimit-Policy",
                    "value": "100;w=60"
                  },
                  {
                    "key": "Ratelimit-Remaining",
                    "value": "98"
                  },
                  {
                    "key": "Ratelimit-Reset",
                    "value": "60"
                  },
                  {
                    "key": "Referrer-Policy",
                    "value": "strict-origin-when-cross-origin"
                  },
                  {
                    "key": "Report-To",
                    "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
                  },
                  {
                    "key": "Reporting-Endpoints",
                    "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
                  },
                  {
                    "key": "Vary",
                    "value": "Origin, Accept-Encoding"
                  },
                  {
                    "key": "Via",
                    "value": "1.1 heroku-router"
                  },
                  {
                    "key": "X-Content-Type-Options",
                    "value": "nosniff"
                  },
                  {
                    "key": "X-Frame-Options",
                    "value": "DENY"
                  },
                  {
                    "key": "X-Request-Id",
                    "value": "b7198cca-6794-1546-2d93-dd031356217b"
                  },
                  {
                    "key": "X-Xss-Protection",
                    "value": "1; mode=block"
                  },
                  {
                    "key": "Cache-Control",
                    "value": "max-age=14400"
                  },
                  {
                    "key": "cf-cache-status",
                    "value": "EXPIRED"
                  },
                  {
                    "key": "Server",
                    "value": "cloudflare"
                  },
                  {
                    "key": "CF-RAY",
                    "value": "97a059564ae29584-LHR"
                  },
                  {
                    "key": "server-timing",
                    "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
                  }
                ],
                "stream": {
                  "type": "Buffer",
                  "data": [
                    123,
                    34,
                    112,
                    97,
                    103,
                    101,
                    34,
                    58,
                    49,
                    44,
                    34,
                    112,
                    101,
                    114,
                    95,
                    112,
                    97,
                    103,
                    101,
                    34,
                    58,
                    54,
                    44,
                    34,
                    116,
                    111,
                    116,
                    97,
                    108,
                    34,
                    58,
                    49,
                    50,
                    44,
                    34,
                    116,
                    111,
                    116,
                    97,
                    108,
                    95,
                    112,
                    97,
                    103,
                    101,
                    115,
                    34,
                    58,
                    50,
                    44,
                    34,
                    100,
                    97,
                    116,
                    97,
                    34,
                    58,
                    91,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    49,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    99,
                    101,
                    114,
                    117,
                    108,
                    101,
                    97,
                    110,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    48,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    57,
                    56,
                    66,
                    50,
                    68,
                    49,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    53,
                    45,
                    52,
                    48,
                    50,
                    48,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    50,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    102,
                    117,
                    99,
                    104,
                    115,
                    105,
                    97,
                    32,
                    114,
                    111,
                    115,
                    101,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    49,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    67,
                    55,
                    52,
                    51,
                    55,
                    53,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    55,
                    45,
                    50,
                    48,
                    51,
                    49,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    51,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    116,
                    114,
                    117,
                    101,
                    32,
                    114,
                    101,
                    100,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    50,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    66,
                    70,
                    49,
                    57,
                    51,
                    50,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    57,
                    45,
                    49,
                    54,
                    54,
                    52,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    52,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    97,
                    113,
                    117,
                    97,
                    32,
                    115,
                    107,
                    121,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    51,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    55,
                    66,
                    67,
                    52,
                    67,
                    52,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    52,
                    45,
                    52,
                    56,
                    49,
                    49,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    53,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    116,
                    105,
                    103,
                    101,
                    114,
                    108,
                    105,
                    108,
                    121,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    52,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    69,
                    50,
                    53,
                    56,
                    51,
                    69,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    55,
                    45,
                    49,
                    52,
                    53,
                    54,
                    34,
                    125,
                    44,
                    123,
                    34,
                    105,
                    100,
                    34,
                    58,
                    54,
                    44,
                    34,
                    110,
                    97,
                    109,
                    101,
                    34,
                    58,
                    34,
                    98,
                    108,
                    117,
                    101,
                    32,
                    116,
                    117,
                    114,
                    113,
                    117,
                    111,
                    105,
                    115,
                    101,
                    34,
                    44,
                    34,
                    121,
                    101,
                    97,
                    114,
                    34,
                    58,
                    50,
                    48,
                    48,
                    53,
                    44,
                    34,
                    99,
                    111,
                    108,
                    111,
                    114,
                    34,
                    58,
                    34,
                    35,
                    53,
                    51,
                    66,
                    48,
                    65,
                    69,
                    34,
                    44,
                    34,
                    112,
                    97,
                    110,
                    116,
                    111,
                    110,
                    101,
                    95,
                    118,
                    97,
                    108,
                    117,
                    101,
                    34,
                    58,
                    34,
                    49,
                    53,
                    45,
                    53,
                    50,
                    49,
                    55,
                    34,
                    125,
                    93,
                    44,
                    34,
                    115,
                    117,
                    112,
                    112,
                    111,
                    114,
                    116,
                    34,
                    58,
                    123,
                    34,
                    117,
                    114,
                    108,
                    34,
                    58,
                    34,
                    104,
                    116,
                    116,
                    112,
                    115,
                    58,
                    47,
                    47,
                    99,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    99,
                    97,
                    100,
                    100,
                    121,
                    46,
                    105,
                    111,
                    63,
                    117,
                    116,
                    109,
                    95,
                    115,
                    111,
                    117,
                    114,
                    99,
                    101,
                    61,
                    114,
                    101,
                    113,
                    114,
                    101,
                    115,
                    38,
                    117,
                    116,
                    109,
                    95,
                    109,
                    101,
                    100,
                    105,
                    117,
                    109,
                    61,
                    106,
                    115,
                    111,
                    110,
                    38,
                    117,
                    116,
                    109,
                    95,
                    99,
                    97,
                    109,
                    112,
                    97,
                    105,
                    103,
                    110,
                    61,
                    114,
                    101,
                    102,
                    101,
                    114,
                    114,
                    97,
                    108,
                    34,
                    44,
                    34,
                    116,
                    101,
                    120,
                    116,
                    34,
                    58,
                    34,
                    84,
                    105,
                    114,
                    101,
                    100,
                    32,
                    111,
                    102,
                    32,
                    119,
                    114,
                    105,
                    116,
                    105,
                    110,
                    103,
                    32,
                    101,
                    110,
                    100,
                    108,
                    101,
                    115,
                    115,
                    32,
                    115,
                    111,
                    99,
                    105,
                    97,
                    108,
                    32,
                    109,
                    101,
                    100,
                    105,
                    97,
                    32,
                    99,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    63,
                    32,
                    76,
                    101,
                    116,
                    32,
                    67,
                    111,
                    110,
                    116,
                    101,
                    110,
                    116,
                    32,
                    67,
                    97,
                    100,
                    100,
                    121,
                    32,
                    103,
                    101,
                    110,
                    101,
                    114,
                    97,
                    116,
                    101,
                    32,
                    105,
                    116,
                    32,
                    102,
                    111,
                    114,
                    32,
                    121,
                    111,
                    117,
                    46,
                    34,
                    125,
                    125
                  ]
                },
                "cookie": [],
                "responseTime": 168,
                "responseSize": 763
              },
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "assertions": [
                {
                  "assertion": "Failing - Response status code is 200",
                  "skipped": false
                },
                {
                  "assertion": "Failing - Response has the required fields",
                  "skipped": false
                },
                {
                  "assertion": "Failing - Validate the structure of the data array",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 2,
                    "test": "Failing - Validate the structure of the data array",
                    "message": "expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'",
                    "stack": "AssertionError: expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'\n   at Object.eval sandbox-script.js:3:2)"
                  }
                },
                {
                  "assertion": "Failing - Email is in a valid format within the data array",
                  "skipped": false,
                  "error": {
                    "name": "AssertionError",
                    "index": 3,
                    "test": "Failing - Email is in a valid format within the data array",
                    "message": "Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
                    "stack": "AssertionError: Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:4:2)"
                  }
                },
                {
                  "assertion": "Failing - Response time is less than 200ms",
                  "skipped": false
                }
              ]
            }
          ],
          "transfers": {
            "responseTotal": 1817
          },
          "failures": [
            {
              "error": {
                "name": "AssertionError",
                "index": 4,
                "test": "Response time is less than 200ms",
                "message": "expected 580 to be below 200",
                "stack": "AssertionError: expected 580 to be below 200\n   at Object.eval sandbox-script.js:5:1)",
                "checksum": "54f5766d35526b84db1f7f3ca1db5339",
                "id": "a7c9eced-3be4-44c5-9224-2ed14e0c175b",
                "timestamp": 1757018918972,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 5,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 1,
                    "native": false
                  }
                ]
              },
              "at": "assertion:4 in test-script",
              "source": {
                "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                "name": "users",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "api",
                      "users"
                    ],
                    "host": [
                      "reqres",
                      "in"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-api-key",
                      "value": "reqres-free-v1"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Response status code is 200\", function () {",
                        "    pm.expect(pm.response.code).to.equal(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response has the required fields\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                        "});",
                        "",
                        "",
                        "pm.test(\"Validate the structure of the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(function(user) {",
                        "        pm.expect(user).to.be.an('object');",
                        "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Email is in a valid format within the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(user => {",
                        "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Response time is less than 200ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(200);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                    }
                  }
                ]
              },
              "parent": {
                "_": {
                  "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "exporter_id": "13334035"
                },
                "item": [
                  {
                    "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                    "name": "users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                    "name": "failing-users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users-failing"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Failing - Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "name": "Sample",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
                }
              },
              "cursor": {
                "position": 0,
                "iteration": 0,
                "length": 2,
                "cycles": 1,
                "empty": false,
                "eof": false,
                "bof": true,
                "cr": false,
                "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
                "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
                "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
                "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 2,
                "test": "Failing - Validate the structure of the data array",
                "message": "expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'",
                "stack": "AssertionError: expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'\n   at Object.eval sandbox-script.js:3:2)",
                "checksum": "510ba5917fa7e53636b51ac837cb75d6",
                "id": "11f1b2e8-0eca-4bcc-b864-33521d8ee11d",
                "timestamp": 1757018919247,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 3,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 2,
                    "native": false
                  }
                ]
              },
              "at": "assertion:2 in test-script",
              "source": {
                "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                "name": "failing-users",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "api",
                      "users-failing"
                    ],
                    "host": [
                      "reqres",
                      "in"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-api-key",
                      "value": "reqres-free-v1"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Failing - Response status code is 200\", function () {",
                        "    pm.expect(pm.response.code).to.equal(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response has the required fields\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(function(user) {",
                        "        pm.expect(user).to.be.an('object');",
                        "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(user => {",
                        "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(200);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                    }
                  }
                ]
              },
              "parent": {
                "_": {
                  "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "exporter_id": "13334035"
                },
                "item": [
                  {
                    "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                    "name": "users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                    "name": "failing-users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users-failing"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Failing - Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "name": "Sample",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
                }
              },
              "cursor": {
                "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
                "length": 2,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
                "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
              }
            },
            {
              "error": {
                "name": "AssertionError",
                "index": 3,
                "test": "Failing - Email is in a valid format within the data array",
                "message": "Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
                "stack": "AssertionError: Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:4:2)",
                "checksum": "d36ef8acb05a0d4bc0230206b42334a1",
                "id": "65491451-bd5c-48f9-bf86-4b611e6db249",
                "timestamp": 1757018919251,
                "stacktrace": [
                  {
                    "fileName": "sandbox-script.js",
                    "lineNumber": 4,
                    "functionName": "Object.eval",
                    "typeName": "Object",
                    "methodName": "eval",
                    "columnNumber": 2,
                    "native": false
                  }
                ]
              },
              "at": "assertion:3 in test-script",
              "source": {
                "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                "name": "failing-users",
                "request": {
                  "url": {
                    "protocol": "https",
                    "path": [
                      "api",
                      "users-failing"
                    ],
                    "host": [
                      "reqres",
                      "in"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-api-key",
                      "value": "reqres-free-v1"
                    }
                  ],
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Failing - Response status code is 200\", function () {",
                        "    pm.expect(pm.response.code).to.equal(200);",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response has the required fields\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(function(user) {",
                        "        pm.expect(user).to.be.an('object');",
                        "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                        "    const responseData = pm.response.json();",
                        "    ",
                        "    pm.expect(responseData).to.be.an('object');",
                        "    pm.expect(responseData.data).to.be.an('array');",
                        "",
                        "    responseData.data.forEach(user => {",
                        "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                        "    });",
                        "});",
                        "",
                        "",
                        "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                        "    pm.expect(pm.response.responseTime).to.be.below(200);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                    }
                  }
                ]
              },
              "parent": {
                "_": {
                  "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "exporter_id": "13334035"
                },
                "item": [
                  {
                    "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                    "name": "users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                    "name": "failing-users",
                    "request": {
                      "url": {
                        "protocol": "https",
                        "path": [
                          "api",
                          "users-failing"
                        ],
                        "host": [
                          "reqres",
                          "in"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "x-api-key",
                          "value": "reqres-free-v1"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                          "type": "text/javascript",
                          "packages": {},
                          "exec": [
                            "pm.test(\"Failing - Response status code is 200\", function () {",
                            "    pm.expect(pm.response.code).to.equal(200);",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response has the required fields\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(function(user) {",
                            "        pm.expect(user).to.be.an('object');",
                            "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                            "    const responseData = pm.response.json();",
                            "    ",
                            "    pm.expect(responseData).to.be.an('object');",
                            "    pm.expect(responseData.data).to.be.an('array');",
                            "",
                            "    responseData.data.forEach(user => {",
                            "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                            "    });",
                            "});",
                            "",
                            "",
                            "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                            "    pm.expect(pm.response.responseTime).to.be.below(200);",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                        }
                      }
                    ]
                  }
                ],
                "event": [],
                "variable": [],
                "info": {
                  "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                  "name": "Sample",
                  "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
                }
              },
              "cursor": {
                "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
                "length": 2,
                "cycles": 1,
                "position": 1,
                "iteration": 0,
                "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
                "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
              }
            }
          ],
          "error": null
        }
      }
    }
  ],
  "done": [
    {
      "collection": {
        "_": {
          "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
          "exporter_id": "13334035"
        },
        "item": [
          {
            "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
            "name": "users",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Response status code is 200\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "});",
                    "",
                    "",
                    "pm.test(\"Response has the required fields\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                    "});",
                    "",
                    "",
                    "pm.test(\"Validate the structure of the data array\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData.data).to.be.an('array');",
                    "",
                    "    responseData.data.forEach(function(user) {",
                    "        pm.expect(user).to.be.an('object');",
                    "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                    "    });",
                    "});",
                    "",
                    "",
                    "pm.test(\"Email is in a valid format within the data array\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData.data).to.be.an('array');",
                    "",
                    "    responseData.data.forEach(user => {",
                    "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                    "    });",
                    "});",
                    "",
                    "",
                    "pm.test(\"Response time is less than 200ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(200);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                }
              }
            ]
          },
          {
            "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
            "name": "failing-users",
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users-failing"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "pm.test(\"Failing - Response status code is 200\", function () {",
                    "    pm.expect(pm.response.code).to.equal(200);",
                    "});",
                    "",
                    "",
                    "pm.test(\"Failing - Response has the required fields\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                    "});",
                    "",
                    "",
                    "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData.data).to.be.an('array');",
                    "",
                    "    responseData.data.forEach(function(user) {",
                    "        pm.expect(user).to.be.an('object');",
                    "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                    "    });",
                    "});",
                    "",
                    "",
                    "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                    "    const responseData = pm.response.json();",
                    "    ",
                    "    pm.expect(responseData).to.be.an('object');",
                    "    pm.expect(responseData.data).to.be.an('array');",
                    "",
                    "    responseData.data.forEach(user => {",
                    "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                    "    });",
                    "});",
                    "",
                    "",
                    "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(200);",
                    "});",
                    ""
                  ],
                  "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                }
              }
            ]
          }
        ],
        "event": [],
        "variable": [],
        "info": {
          "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
          "name": "Sample",
          "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
        }
      },
      "environment": {
        "id": "2616afa5-8c8e-4aba-9dca-f905f4f6a43d",
        "values": []
      },
      "globals": {
        "id": "50e4df67-19f6-4d3c-a26a-170830acbb14",
        "values": []
      },
      "run": {
        "stats": {
          "iterations": {
            "total": 1,
            "pending": 0,
            "failed": 0
          },
          "items": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "scripts": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "prerequests": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "requests": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "tests": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "assertions": {
            "total": 10,
            "pending": 0,
            "failed": 3
          },
          "testScripts": {
            "total": 2,
            "pending": 0,
            "failed": 0
          },
          "prerequestScripts": {
            "total": 0,
            "pending": 0,
            "failed": 0
          }
        },
        "timings": {
          "responseAverage": 374,
          "responseMin": 168,
          "responseMax": 580,
          "responseSd": 206,
          "dnsAverage": 0,
          "dnsMin": 0,
          "dnsMax": 0,
          "dnsSd": 0,
          "firstByteAverage": 0,
          "firstByteMin": 0,
          "firstByteMax": 0,
          "firstByteSd": 0,
          "started": 1757018918260,
          "completed": 1757018919292
        },
        "executions": [
          {
            "cursor": {
              "position": 0,
              "iteration": 0,
              "length": 2,
              "cycles": 1,
              "empty": false,
              "eof": false,
              "bof": true,
              "cr": false,
              "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
              "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8"
            },
            "item": {
              "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "name": "users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                  }
                }
              ]
            },
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                },
                {
                  "key": "User-Agent",
                  "value": "PostmanRuntime/7.39.1",
                  "system": true
                },
                {
                  "key": "Accept",
                  "value": "*/*",
                  "system": true
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache",
                  "system": true
                },
                {
                  "key": "Postman-Token",
                  "value": "dcfc39c2-5538-4593-8381-926f982713d3",
                  "system": true
                },
                {
                  "key": "Host",
                  "value": "reqres.in",
                  "system": true
                },
                {
                  "key": "Accept-Encoding",
                  "value": "gzip, deflate, br",
                  "system": true
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "system": true
                }
              ],
              "method": "GET"
            },
            "response": {
              "id": "9262640e-f74e-419a-b0cf-d5858b50d83c",
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Date",
                  "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Access-Control-Allow-Headers",
                  "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                },
                {
                  "key": "Access-Control-Allow-Methods",
                  "value": "GET, POST, PUT, DELETE, OPTIONS"
                },
                {
                  "key": "Access-Control-Allow-Origin",
                  "value": "http://localhost:5173"
                },
                {
                  "key": "etag",
                  "value": "W/\"41e-bY3U72nulxuwNd/TmihMEHjLmek\""
                },
                {
                  "key": "Nel",
                  "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                },
                {
                  "key": "Ratelimit-Limit",
                  "value": "100"
                },
                {
                  "key": "Ratelimit-Policy",
                  "value": "100;w=60"
                },
                {
                  "key": "Ratelimit-Remaining",
                  "value": "98"
                },
                {
                  "key": "Ratelimit-Reset",
                  "value": "60"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin"
                },
                {
                  "key": "Report-To",
                  "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757009692\"}],\"max_age\":3600}"
                },
                {
                  "key": "Reporting-Endpoints",
                  "value": "heroku-nel=\"https://nel.heroku.com/reports?s=31ogzvujMp2CiDbyisUv%2B162F551CLTlcdTHS2dB9rw%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757009692\""
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Via",
                  "value": "1.1 heroku-router"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "DENY"
                },
                {
                  "key": "X-Request-Id",
                  "value": "e1941749-7b60-e36e-8d77-156b64e83683"
                },
                {
                  "key": "X-Xss-Protection",
                  "value": "1; mode=block"
                },
                {
                  "key": "Age",
                  "value": "2007"
                },
                {
                  "key": "Cache-Control",
                  "value": "max-age=14400"
                },
                {
                  "key": "cf-cache-status",
                  "value": "HIT"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "CF-RAY",
                  "value": "97a0595448929584-LHR"
                },
                {
                  "key": "server-timing",
                  "value": "cfL4;desc=\"?proto=TCP&rtt=90344&min_rtt=89871&rtt_var=34649&sent=4&recv=5&lost=0&retrans=0&sent_bytes=2816&recv_bytes=726&delivery_rate=43560&cwnd=33&unsent_bytes=0&cid=c89a96c796a03a8e&ts=144&x=0\""
                }
              ],
              "stream": {
                "type": "Buffer",
                "data": [
                  123,
                  34,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  49,
                  44,
                  34,
                  112,
                  101,
                  114,
                  95,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  54,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  34,
                  58,
                  49,
                  50,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  95,
                  112,
                  97,
                  103,
                  101,
                  115,
                  34,
                  58,
                  50,
                  44,
                  34,
                  100,
                  97,
                  116,
                  97,
                  34,
                  58,
                  91,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  49,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  103,
                  101,
                  111,
                  114,
                  103,
                  101,
                  46,
                  98,
                  108,
                  117,
                  116,
                  104,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  71,
                  101,
                  111,
                  114,
                  103,
                  101,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  66,
                  108,
                  117,
                  116,
                  104,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  49,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  50,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  106,
                  97,
                  110,
                  101,
                  116,
                  46,
                  119,
                  101,
                  97,
                  118,
                  101,
                  114,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  74,
                  97,
                  110,
                  101,
                  116,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  87,
                  101,
                  97,
                  118,
                  101,
                  114,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  50,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  51,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  101,
                  109,
                  109,
                  97,
                  46,
                  119,
                  111,
                  110,
                  103,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  69,
                  109,
                  109,
                  97,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  87,
                  111,
                  110,
                  103,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  51,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  52,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  101,
                  118,
                  101,
                  46,
                  104,
                  111,
                  108,
                  116,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  69,
                  118,
                  101,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  72,
                  111,
                  108,
                  116,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  52,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  53,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  99,
                  104,
                  97,
                  114,
                  108,
                  101,
                  115,
                  46,
                  109,
                  111,
                  114,
                  114,
                  105,
                  115,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  67,
                  104,
                  97,
                  114,
                  108,
                  101,
                  115,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  77,
                  111,
                  114,
                  114,
                  105,
                  115,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  53,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  54,
                  44,
                  34,
                  101,
                  109,
                  97,
                  105,
                  108,
                  34,
                  58,
                  34,
                  116,
                  114,
                  97,
                  99,
                  101,
                  121,
                  46,
                  114,
                  97,
                  109,
                  111,
                  115,
                  64,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  34,
                  44,
                  34,
                  102,
                  105,
                  114,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  84,
                  114,
                  97,
                  99,
                  101,
                  121,
                  34,
                  44,
                  34,
                  108,
                  97,
                  115,
                  116,
                  95,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  82,
                  97,
                  109,
                  111,
                  115,
                  34,
                  44,
                  34,
                  97,
                  118,
                  97,
                  116,
                  97,
                  114,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  46,
                  105,
                  110,
                  47,
                  105,
                  109,
                  103,
                  47,
                  102,
                  97,
                  99,
                  101,
                  115,
                  47,
                  54,
                  45,
                  105,
                  109,
                  97,
                  103,
                  101,
                  46,
                  106,
                  112,
                  103,
                  34,
                  125,
                  93,
                  44,
                  34,
                  115,
                  117,
                  112,
                  112,
                  111,
                  114,
                  116,
                  34,
                  58,
                  123,
                  34,
                  117,
                  114,
                  108,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  99,
                  97,
                  100,
                  100,
                  121,
                  46,
                  105,
                  111,
                  63,
                  117,
                  116,
                  109,
                  95,
                  115,
                  111,
                  117,
                  114,
                  99,
                  101,
                  61,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  38,
                  117,
                  116,
                  109,
                  95,
                  109,
                  101,
                  100,
                  105,
                  117,
                  109,
                  61,
                  106,
                  115,
                  111,
                  110,
                  38,
                  117,
                  116,
                  109,
                  95,
                  99,
                  97,
                  109,
                  112,
                  97,
                  105,
                  103,
                  110,
                  61,
                  114,
                  101,
                  102,
                  101,
                  114,
                  114,
                  97,
                  108,
                  34,
                  44,
                  34,
                  116,
                  101,
                  120,
                  116,
                  34,
                  58,
                  34,
                  84,
                  105,
                  114,
                  101,
                  100,
                  32,
                  111,
                  102,
                  32,
                  119,
                  114,
                  105,
                  116,
                  105,
                  110,
                  103,
                  32,
                  101,
                  110,
                  100,
                  108,
                  101,
                  115,
                  115,
                  32,
                  115,
                  111,
                  99,
                  105,
                  97,
                  108,
                  32,
                  109,
                  101,
                  100,
                  105,
                  97,
                  32,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  63,
                  32,
                  76,
                  101,
                  116,
                  32,
                  67,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  32,
                  67,
                  97,
                  100,
                  100,
                  121,
                  32,
                  103,
                  101,
                  110,
                  101,
                  114,
                  97,
                  116,
                  101,
                  32,
                  105,
                  116,
                  32,
                  102,
                  111,
                  114,
                  32,
                  121,
                  111,
                  117,
                  46,
                  34,
                  125,
                  125
                ]
              },
              "cookie": [],
              "responseTime": 580,
              "responseSize": 1054
            },
            "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
            "assertions": [
              {
                "assertion": "Response status code is 200",
                "skipped": false
              },
              {
                "assertion": "Response has the required fields",
                "skipped": false
              },
              {
                "assertion": "Validate the structure of the data array",
                "skipped": false
              },
              {
                "assertion": "Email is in a valid format within the data array",
                "skipped": false
              },
              {
                "assertion": "Response time is less than 200ms",
                "skipped": false,
                "error": {
                  "name": "AssertionError",
                  "index": 4,
                  "test": "Response time is less than 200ms",
                  "message": "expected 580 to be below 200",
                  "stack": "AssertionError: expected 580 to be below 200\n   at Object.eval sandbox-script.js:5:1)"
                }
              }
            ]
          },
          {
            "cursor": {
              "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
              "length": 2,
              "cycles": 1,
              "position": 1,
              "iteration": 0,
              "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647"
            },
            "item": {
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "name": "failing-users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Failing - Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                  }
                }
              ]
            },
            "request": {
              "url": {
                "protocol": "https",
                "path": [
                  "api",
                  "users-failing"
                ],
                "host": [
                  "reqres",
                  "in"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "x-api-key",
                  "value": "reqres-free-v1"
                },
                {
                  "key": "User-Agent",
                  "value": "PostmanRuntime/7.39.1",
                  "system": true
                },
                {
                  "key": "Accept",
                  "value": "*/*",
                  "system": true
                },
                {
                  "key": "Cache-Control",
                  "value": "no-cache",
                  "system": true
                },
                {
                  "key": "Postman-Token",
                  "value": "c15fa6c5-154c-4670-b109-ed47a1347727",
                  "system": true
                },
                {
                  "key": "Host",
                  "value": "reqres.in",
                  "system": true
                },
                {
                  "key": "Accept-Encoding",
                  "value": "gzip, deflate, br",
                  "system": true
                },
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "system": true
                }
              ],
              "method": "GET"
            },
            "response": {
              "id": "d006f2d6-4258-442f-9a59-9b1e8e2fec35",
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Date",
                  "value": "Thu, 04 Sep 2025 20:48:39 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Transfer-Encoding",
                  "value": "chunked"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                },
                {
                  "key": "Content-Encoding",
                  "value": "br"
                },
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": "true"
                },
                {
                  "key": "Access-Control-Allow-Headers",
                  "value": "Origin, X-Requested-With, Content-Type, Accept, Authorization, x-api-key"
                },
                {
                  "key": "Access-Control-Allow-Methods",
                  "value": "GET, POST, PUT, DELETE, OPTIONS"
                },
                {
                  "key": "Access-Control-Allow-Origin",
                  "value": "http://localhost:5173"
                },
                {
                  "key": "Etag",
                  "value": "W/\"2fb-zJ/iiAzm4zf7SruyfEtNo0xEDoY\""
                },
                {
                  "key": "Nel",
                  "value": "{\"report_to\":\"heroku-nel\",\"response_headers\":[\"Via\"],\"max_age\":3600,\"success_fraction\":0.01,\"failure_fraction\":0.1}"
                },
                {
                  "key": "Ratelimit-Limit",
                  "value": "100"
                },
                {
                  "key": "Ratelimit-Policy",
                  "value": "100;w=60"
                },
                {
                  "key": "Ratelimit-Remaining",
                  "value": "98"
                },
                {
                  "key": "Ratelimit-Reset",
                  "value": "60"
                },
                {
                  "key": "Referrer-Policy",
                  "value": "strict-origin-when-cross-origin"
                },
                {
                  "key": "Report-To",
                  "value": "{\"group\":\"heroku-nel\",\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D\\u0026sid=c4c9725f-1ab0-44d8-820f-430df2718e11\\u0026ts=1757018919\"}],\"max_age\":3600}"
                },
                {
                  "key": "Reporting-Endpoints",
                  "value": "heroku-nel=\"https://nel.heroku.com/reports?s=NyX98D1IlXVqqo8Hc3GxR7ojV9UKJxjawouY77yXYjE%3D&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&ts=1757018919\""
                },
                {
                  "key": "Vary",
                  "value": "Origin, Accept-Encoding"
                },
                {
                  "key": "Via",
                  "value": "1.1 heroku-router"
                },
                {
                  "key": "X-Content-Type-Options",
                  "value": "nosniff"
                },
                {
                  "key": "X-Frame-Options",
                  "value": "DENY"
                },
                {
                  "key": "X-Request-Id",
                  "value": "b7198cca-6794-1546-2d93-dd031356217b"
                },
                {
                  "key": "X-Xss-Protection",
                  "value": "1; mode=block"
                },
                {
                  "key": "Cache-Control",
                  "value": "max-age=14400"
                },
                {
                  "key": "cf-cache-status",
                  "value": "EXPIRED"
                },
                {
                  "key": "Server",
                  "value": "cloudflare"
                },
                {
                  "key": "CF-RAY",
                  "value": "97a059564ae29584-LHR"
                },
                {
                  "key": "server-timing",
                  "value": "cfL4;desc=\"?proto=TCP&rtt=102337&min_rtt=89871&rtt_var=35789&sent=10&recv=9&lost=0&retrans=0&sent_bytes=5424&recv_bytes=1013&delivery_rate=50583&cwnd=38&unsent_bytes=0&cid=c89a96c796a03a8e&ts=494&x=0\""
                }
              ],
              "stream": {
                "type": "Buffer",
                "data": [
                  123,
                  34,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  49,
                  44,
                  34,
                  112,
                  101,
                  114,
                  95,
                  112,
                  97,
                  103,
                  101,
                  34,
                  58,
                  54,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  34,
                  58,
                  49,
                  50,
                  44,
                  34,
                  116,
                  111,
                  116,
                  97,
                  108,
                  95,
                  112,
                  97,
                  103,
                  101,
                  115,
                  34,
                  58,
                  50,
                  44,
                  34,
                  100,
                  97,
                  116,
                  97,
                  34,
                  58,
                  91,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  49,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  99,
                  101,
                  114,
                  117,
                  108,
                  101,
                  97,
                  110,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  48,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  57,
                  56,
                  66,
                  50,
                  68,
                  49,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  53,
                  45,
                  52,
                  48,
                  50,
                  48,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  50,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  102,
                  117,
                  99,
                  104,
                  115,
                  105,
                  97,
                  32,
                  114,
                  111,
                  115,
                  101,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  49,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  67,
                  55,
                  52,
                  51,
                  55,
                  53,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  55,
                  45,
                  50,
                  48,
                  51,
                  49,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  51,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  116,
                  114,
                  117,
                  101,
                  32,
                  114,
                  101,
                  100,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  50,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  66,
                  70,
                  49,
                  57,
                  51,
                  50,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  57,
                  45,
                  49,
                  54,
                  54,
                  52,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  52,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  97,
                  113,
                  117,
                  97,
                  32,
                  115,
                  107,
                  121,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  51,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  55,
                  66,
                  67,
                  52,
                  67,
                  52,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  52,
                  45,
                  52,
                  56,
                  49,
                  49,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  53,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  116,
                  105,
                  103,
                  101,
                  114,
                  108,
                  105,
                  108,
                  121,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  52,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  69,
                  50,
                  53,
                  56,
                  51,
                  69,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  55,
                  45,
                  49,
                  52,
                  53,
                  54,
                  34,
                  125,
                  44,
                  123,
                  34,
                  105,
                  100,
                  34,
                  58,
                  54,
                  44,
                  34,
                  110,
                  97,
                  109,
                  101,
                  34,
                  58,
                  34,
                  98,
                  108,
                  117,
                  101,
                  32,
                  116,
                  117,
                  114,
                  113,
                  117,
                  111,
                  105,
                  115,
                  101,
                  34,
                  44,
                  34,
                  121,
                  101,
                  97,
                  114,
                  34,
                  58,
                  50,
                  48,
                  48,
                  53,
                  44,
                  34,
                  99,
                  111,
                  108,
                  111,
                  114,
                  34,
                  58,
                  34,
                  35,
                  53,
                  51,
                  66,
                  48,
                  65,
                  69,
                  34,
                  44,
                  34,
                  112,
                  97,
                  110,
                  116,
                  111,
                  110,
                  101,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  34,
                  58,
                  34,
                  49,
                  53,
                  45,
                  53,
                  50,
                  49,
                  55,
                  34,
                  125,
                  93,
                  44,
                  34,
                  115,
                  117,
                  112,
                  112,
                  111,
                  114,
                  116,
                  34,
                  58,
                  123,
                  34,
                  117,
                  114,
                  108,
                  34,
                  58,
                  34,
                  104,
                  116,
                  116,
                  112,
                  115,
                  58,
                  47,
                  47,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  99,
                  97,
                  100,
                  100,
                  121,
                  46,
                  105,
                  111,
                  63,
                  117,
                  116,
                  109,
                  95,
                  115,
                  111,
                  117,
                  114,
                  99,
                  101,
                  61,
                  114,
                  101,
                  113,
                  114,
                  101,
                  115,
                  38,
                  117,
                  116,
                  109,
                  95,
                  109,
                  101,
                  100,
                  105,
                  117,
                  109,
                  61,
                  106,
                  115,
                  111,
                  110,
                  38,
                  117,
                  116,
                  109,
                  95,
                  99,
                  97,
                  109,
                  112,
                  97,
                  105,
                  103,
                  110,
                  61,
                  114,
                  101,
                  102,
                  101,
                  114,
                  114,
                  97,
                  108,
                  34,
                  44,
                  34,
                  116,
                  101,
                  120,
                  116,
                  34,
                  58,
                  34,
                  84,
                  105,
                  114,
                  101,
                  100,
                  32,
                  111,
                  102,
                  32,
                  119,
                  114,
                  105,
                  116,
                  105,
                  110,
                  103,
                  32,
                  101,
                  110,
                  100,
                  108,
                  101,
                  115,
                  115,
                  32,
                  115,
                  111,
                  99,
                  105,
                  97,
                  108,
                  32,
                  109,
                  101,
                  100,
                  105,
                  97,
                  32,
                  99,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  63,
                  32,
                  76,
                  101,
                  116,
                  32,
                  67,
                  111,
                  110,
                  116,
                  101,
                  110,
                  116,
                  32,
                  67,
                  97,
                  100,
                  100,
                  121,
                  32,
                  103,
                  101,
                  110,
                  101,
                  114,
                  97,
                  116,
                  101,
                  32,
                  105,
                  116,
                  32,
                  102,
                  111,
                  114,
                  32,
                  121,
                  111,
                  117,
                  46,
                  34,
                  125,
                  125
                ]
              },
              "cookie": [],
              "responseTime": 168,
              "responseSize": 763
            },
            "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
            "assertions": [
              {
                "assertion": "Failing - Response status code is 200",
                "skipped": false
              },
              {
                "assertion": "Failing - Response has the required fields",
                "skipped": false
              },
              {
                "assertion": "Failing - Validate the structure of the data array",
                "skipped": false,
                "error": {
                  "name": "AssertionError",
                  "index": 2,
                  "test": "Failing - Validate the structure of the data array",
                  "message": "expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'",
                  "stack": "AssertionError: expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'\n   at Object.eval sandbox-script.js:3:2)"
                }
              },
              {
                "assertion": "Failing - Email is in a valid format within the data array",
                "skipped": false,
                "error": {
                  "name": "AssertionError",
                  "index": 3,
                  "test": "Failing - Email is in a valid format within the data array",
                  "message": "Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
                  "stack": "AssertionError: Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:4:2)"
                }
              },
              {
                "assertion": "Failing - Response time is less than 200ms",
                "skipped": false
              }
            ]
          }
        ],
        "transfers": {
          "responseTotal": 1817
        },
        "failures": [
          {
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response time is less than 200ms",
              "message": "expected 580 to be below 200",
              "stack": "AssertionError: expected 580 to be below 200\n   at Object.eval sandbox-script.js:5:1)",
              "checksum": "54f5766d35526b84db1f7f3ca1db5339",
              "id": "a7c9eced-3be4-44c5-9224-2ed14e0c175b",
              "timestamp": 1757018918972,
              "stacktrace": [
                {
                  "fileName": "sandbox-script.js",
                  "lineNumber": 5,
                  "functionName": "Object.eval",
                  "typeName": "Object",
                  "methodName": "eval",
                  "columnNumber": 1,
                  "native": false
                }
              ]
            },
            "at": "assertion:4 in test-script",
            "source": {
              "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
              "name": "users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                  }
                }
              ]
            },
            "parent": {
              "_": {
                "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "exporter_id": "13334035"
              },
              "item": [
                {
                  "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                  "name": "users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                      }
                    }
                  ]
                },
                {
                  "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                  "name": "failing-users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users-failing"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Failing - Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                      }
                    }
                  ]
                }
              ],
              "event": [],
              "variable": [],
              "info": {
                "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "name": "Sample",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
              }
            },
            "cursor": {
              "position": 0,
              "iteration": 0,
              "length": 2,
              "cycles": 1,
              "empty": false,
              "eof": false,
              "bof": true,
              "cr": false,
              "ref": "7305da6c-2e60-40d4-be1f-33411f3f6121",
              "httpRequestId": "ac1c21c4-6def-403a-99c8-a9720157c5c8",
              "scriptId": "a3447906-ff68-4025-9d6f-6493c259f132",
              "execution": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
            }
          },
          {
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Failing - Validate the structure of the data array",
              "message": "expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'",
              "stack": "AssertionError: expected { id: 1, name: 'cerulean', …(3) } to have keys 'id', 'email', 'first_name', 'last_name', and 'avatar'\n   at Object.eval sandbox-script.js:3:2)",
              "checksum": "510ba5917fa7e53636b51ac837cb75d6",
              "id": "11f1b2e8-0eca-4bcc-b864-33521d8ee11d",
              "timestamp": 1757018919247,
              "stacktrace": [
                {
                  "fileName": "sandbox-script.js",
                  "lineNumber": 3,
                  "functionName": "Object.eval",
                  "typeName": "Object",
                  "methodName": "eval",
                  "columnNumber": 2,
                  "native": false
                }
              ]
            },
            "at": "assertion:2 in test-script",
            "source": {
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "name": "failing-users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Failing - Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                  }
                }
              ]
            },
            "parent": {
              "_": {
                "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "exporter_id": "13334035"
              },
              "item": [
                {
                  "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                  "name": "users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                      }
                    }
                  ]
                },
                {
                  "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                  "name": "failing-users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users-failing"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Failing - Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                      }
                    }
                  ]
                }
              ],
              "event": [],
              "variable": [],
              "info": {
                "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "name": "Sample",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
              }
            },
            "cursor": {
              "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
              "length": 2,
              "cycles": 1,
              "position": 1,
              "iteration": 0,
              "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
              "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          },
          {
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Failing - Email is in a valid format within the data array",
              "message": "Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/",
              "stack": "AssertionError: Email format is invalid: expected undefined to match /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n   at Object.eval sandbox-script.js:4:2)",
              "checksum": "d36ef8acb05a0d4bc0230206b42334a1",
              "id": "65491451-bd5c-48f9-bf86-4b611e6db249",
              "timestamp": 1757018919251,
              "stacktrace": [
                {
                  "fileName": "sandbox-script.js",
                  "lineNumber": 4,
                  "functionName": "Object.eval",
                  "typeName": "Object",
                  "methodName": "eval",
                  "columnNumber": 2,
                  "native": false
                }
              ]
            },
            "at": "assertion:3 in test-script",
            "source": {
              "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
              "name": "failing-users",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "api",
                    "users-failing"
                  ],
                  "host": [
                    "reqres",
                    "in"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-api-key",
                    "value": "reqres-free-v1"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Failing - Response status code is 200\", function () {",
                      "    pm.expect(pm.response.code).to.equal(200);",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response has the required fields\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(function(user) {",
                      "        pm.expect(user).to.be.an('object');",
                      "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                      "    const responseData = pm.response.json();",
                      "    ",
                      "    pm.expect(responseData).to.be.an('object');",
                      "    pm.expect(responseData.data).to.be.an('array');",
                      "",
                      "    responseData.data.forEach(user => {",
                      "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                      "    });",
                      "});",
                      "",
                      "",
                      "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(200);",
                      "});",
                      ""
                    ],
                    "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                  }
                }
              ]
            },
            "parent": {
              "_": {
                "postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "exporter_id": "13334035"
              },
              "item": [
                {
                  "id": "10d7d279-5beb-4a2a-bb1e-315e5b8aba74",
                  "name": "users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "a3447906-ff68-4025-9d6f-6493c259f132",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "3bb1ccc5-5230-40b0-ae9b-2c0552a00c70"
                      }
                    }
                  ]
                },
                {
                  "id": "1e6669c6-04a4-4354-9e24-9b7c6c2f974a",
                  "name": "failing-users",
                  "request": {
                    "url": {
                      "protocol": "https",
                      "path": [
                        "api",
                        "users-failing"
                      ],
                      "host": [
                        "reqres",
                        "in"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "x-api-key",
                        "value": "reqres-free-v1"
                      }
                    ],
                    "method": "GET"
                  },
                  "response": [],
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
                        "type": "text/javascript",
                        "packages": {},
                        "exec": [
                          "pm.test(\"Failing - Response status code is 200\", function () {",
                          "    pm.expect(pm.response.code).to.equal(200);",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response has the required fields\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData).to.have.all.keys('page', 'per_page', 'total', 'total_pages', 'data', 'support');",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Validate the structure of the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(function(user) {",
                          "        pm.expect(user).to.be.an('object');",
                          "        pm.expect(user).to.have.all.keys('id', 'email', 'first_name', 'last_name', 'avatar');",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Email is in a valid format within the data array\", function () {",
                          "    const responseData = pm.response.json();",
                          "    ",
                          "    pm.expect(responseData).to.be.an('object');",
                          "    pm.expect(responseData.data).to.be.an('array');",
                          "",
                          "    responseData.data.forEach(user => {",
                          "        pm.expect(user.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/, \"Email format is invalid\");",
                          "    });",
                          "});",
                          "",
                          "",
                          "pm.test(\"Failing - Response time is less than 200ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(200);",
                          "});",
                          ""
                        ],
                        "_lastExecutionId": "470cf04d-3423-4636-925c-464cfbc7573d"
                      }
                    }
                  ]
                }
              ],
              "event": [],
              "variable": [],
              "info": {
                "_postman_id": "9dd8a3df-5650-45e7-a291-4f044dfb4e56",
                "name": "Sample",
                "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
              }
            },
            "cursor": {
              "ref": "393a6aac-9e42-4c6f-8c5c-d8894e9264f8",
              "length": 2,
              "cycles": 1,
              "position": 1,
              "iteration": 0,
              "httpRequestId": "edb1885f-e3f9-4fdb-83f3-4e21b7429647",
              "scriptId": "c7ebc717-cc35-4d2a-a5d5-1964c9f5bcbc",
              "execution": "470cf04d-3423-4636-925c-464cfbc7573d"
            }
          }
        ],
        "error": null
      }
    }
  ]
}